-- SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and Greenhouse contributors
-- SPDX-License-Identifier: Apache-2.0

-- 1. Create the table (only if not exists to avoid errors if re-run)
CREATE TABLE IF NOT EXISTS mvSingleComponentByServiceVulnerabilityCounts (
    service_id INT UNSIGNED NOT NULL,
    component_id INT UNSIGNED NOT NULL,
    critical_count INT DEFAULT 0,
    high_count INT DEFAULT 0,
    medium_count INT DEFAULT 0,
    low_count INT DEFAULT 0,
    none_count INT DEFAULT 0,
    constraint fk_mvsinglecomponentbyservicevulnerabilitycounts_service_id
        foreign key (service_id) references Service (service_id),
    constraint fk_mvsinglecomponentbyservicevulnerabilitycounts_component_id
        foreign key (component_id) references Component (component_id)
);

CREATE TABLE IF NOT EXISTS mvAllComponentsByServiceVulnerabilityCounts (
    service_id INT UNSIGNED NOT NULL,
    critical_count INT DEFAULT 0,
    high_count INT DEFAULT 0,
    medium_count INT DEFAULT 0,
    low_count INT DEFAULT 0,
    none_count INT DEFAULT 0,
    constraint fk_mvallcomponentsbyservicevulnerabilitycounts_service_id
        foreign key (service_id) references Service (service_id)
);

-- 2. Create or replace the procedure that refreshes the table
CREATE PROCEDURE refresh_mvSingleComponentByServiceVulnerabilityCounts_proc()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE current_service_id INT;
    DECLARE service_cursor CURSOR FOR
        SELECT service_id FROM Service;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    TRUNCATE TABLE mvSingleComponentByServiceVulnerabilityCounts;
    OPEN service_cursor;

    service_loop: LOOP
        FETCH service_cursor INTO current_service_id;
        IF done THEN
            LEAVE service_loop;
        END IF;

        -- Execute the query for the current service_id
        INSERT INTO mvSingleComponentByServiceVulnerabilityCounts
        SELECT
            current_service_id AS service_id,
            CV.componentversion_component_id AS component_id,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Critical'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS critical_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'High'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS high_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Medium'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS medium_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Low'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS low_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'None'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS none_count
        FROM
            IssueMatch AS IM
            INNER JOIN ComponentInstance AS CI ON CI.componentinstance_id = IM.issuematch_component_instance_id
            INNER JOIN ComponentVersion AS CV ON CV.componentversion_id = CI.componentinstance_component_version_id
            INNER JOIN IssueVariant AS IV ON IV.issuevariant_issue_id = IM.issuematch_issue_id
            INNER JOIN Issue AS I ON I.issue_id = IV.issuevariant_issue_id
        WHERE
            IM.issuematch_status = 'new'
            AND I.issue_type = 'Vulnerability'
            AND IV.issuevariant_issue_id IS NOT NULL
            AND IV.issuevariant_rating IS NOT NULL
            AND IM.issuematch_deleted_at IS NULL
            AND I.issue_deleted_at IS NULL
            AND CI.componentinstance_deleted_at IS NULL
            AND CV.componentversion_deleted_at IS NULL
            AND CI.componentinstance_service_id = current_service_id
        GROUP BY
            CV.componentversion_component_id,
            IV.issuevariant_rating;
    END LOOP;

    CLOSE service_cursor;
END;

CREATE PROCEDURE refresh_mvAllComponentsByServiceVulnerabilityCounts_proc()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE current_service_id INT;
    DECLARE service_cursor CURSOR FOR
        SELECT service_id FROM Service;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    TRUNCATE TABLE mvAllComponentsByServiceVulnerabilityCounts;
    OPEN service_cursor;

    service_loop: LOOP
        FETCH service_cursor INTO current_service_id;
        IF done THEN
            LEAVE service_loop;
        END IF;

        -- Execute the query for the current service_id
        INSERT INTO mvAllComponentsByServiceVulnerabilityCounts
        SELECT 
            current_service_id AS service_id,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Critical'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS critical_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'High'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS high_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Medium'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS medium_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'Low'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS low_count,
            COUNT(DISTINCT CASE WHEN IV.issuevariant_rating = 'None'
                THEN CONCAT(CV.componentversion_component_id, ',', IV.issuevariant_issue_id) END) AS none_count
        FROM 
            IssueMatch AS IM 
            INNER JOIN ComponentInstance AS CI ON CI.componentinstance_id = IM.issuematch_component_instance_id 
            INNER JOIN ComponentVersion AS CV ON CV.componentversion_id = CI.componentinstance_component_version_id 
            INNER JOIN IssueVariant AS IV ON IV.issuevariant_issue_id = IM.issuematch_issue_id  
            INNER JOIN Issue AS I ON I.issue_id = IV.issuevariant_issue_id
        WHERE 
            IM.issuematch_status = 'new' 
            AND CI.componentinstance_service_id = current_service_id 
            AND I.issue_type = 'Vulnerability'
            AND IV.issuevariant_issue_id IS NOT NULL
            AND IM.issuematch_deleted_at IS NULL
            AND I.issue_deleted_at IS NULL
            AND CI.componentinstance_deleted_at IS NULL
            AND CV.componentversion_deleted_at IS NULL
        GROUP BY
            IV.issuevariant_rating;
    END LOOP;

    CLOSE service_cursor;
END;

-- 3. Run the procedure once to populate the table initially
-- CALL refresh_mvSingleComponentByServiceVulnerabilityCounts_proc();
-- CALL refresh_mvAllComponentsByServiceVulnerabilityCounts_proc();

-- -- 4. Create the event to run the procedure every hour
CREATE EVENT IF NOT EXISTS refresh_mvSingleComponentByServiceVulnerabilityCounts
ON SCHEDULE EVERY 1 HOUR
DO
  CALL refresh_mvSingleComponentByServiceVulnerabilityCounts_proc();


CREATE EVENT IF NOT EXISTS refresh_mvAllComponentsByServiceVulnerabilityCounts
ON SCHEDULE EVERY 1 HOUR
DO
  CALL refresh_mvAllComponentsByServiceVulnerabilityCounts_proc();
