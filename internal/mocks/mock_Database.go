// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/cloudoperators/heureka/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// AddComponentVersionToIssue provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddComponentVersionToIssue(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddComponentVersionToIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddComponentVersionToIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComponentVersionToIssue'
type MockDatabase_AddComponentVersionToIssue_Call struct {
	*mock.Call
}

// AddComponentVersionToIssue is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddComponentVersionToIssue(_a0 interface{}, _a1 interface{}) *MockDatabase_AddComponentVersionToIssue_Call {
	return &MockDatabase_AddComponentVersionToIssue_Call{Call: _e.mock.On("AddComponentVersionToIssue", _a0, _a1)}
}

func (_c *MockDatabase_AddComponentVersionToIssue_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddComponentVersionToIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddComponentVersionToIssue_Call) Return(_a0 error) *MockDatabase_AddComponentVersionToIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddComponentVersionToIssue_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddComponentVersionToIssue_Call {
	_c.Call.Return(run)
	return _c
}

// AddEvidenceToIssueMatch provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddEvidenceToIssueMatch(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddEvidenceToIssueMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddEvidenceToIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvidenceToIssueMatch'
type MockDatabase_AddEvidenceToIssueMatch_Call struct {
	*mock.Call
}

// AddEvidenceToIssueMatch is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddEvidenceToIssueMatch(_a0 interface{}, _a1 interface{}) *MockDatabase_AddEvidenceToIssueMatch_Call {
	return &MockDatabase_AddEvidenceToIssueMatch_Call{Call: _e.mock.On("AddEvidenceToIssueMatch", _a0, _a1)}
}

func (_c *MockDatabase_AddEvidenceToIssueMatch_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddEvidenceToIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddEvidenceToIssueMatch_Call) Return(_a0 error) *MockDatabase_AddEvidenceToIssueMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddEvidenceToIssueMatch_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddEvidenceToIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddIssueRepositoryToService provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDatabase) AddIssueRepositoryToService(_a0 int64, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueRepositoryToService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddIssueRepositoryToService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIssueRepositoryToService'
type MockDatabase_AddIssueRepositoryToService_Call struct {
	*mock.Call
}

// AddIssueRepositoryToService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
//   - _a2 int64
func (_e *MockDatabase_Expecter) AddIssueRepositoryToService(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockDatabase_AddIssueRepositoryToService_Call {
	return &MockDatabase_AddIssueRepositoryToService_Call{Call: _e.mock.On("AddIssueRepositoryToService", _a0, _a1, _a2)}
}

func (_c *MockDatabase_AddIssueRepositoryToService_Call) Run(run func(_a0 int64, _a1 int64, _a2 int64)) *MockDatabase_AddIssueRepositoryToService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddIssueRepositoryToService_Call) Return(_a0 error) *MockDatabase_AddIssueRepositoryToService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddIssueRepositoryToService_Call) RunAndReturn(run func(int64, int64, int64) error) *MockDatabase_AddIssueRepositoryToService_Call {
	_c.Call.Return(run)
	return _c
}

// AddIssueToActivity provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddIssueToActivity(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueToActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddIssueToActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIssueToActivity'
type MockDatabase_AddIssueToActivity_Call struct {
	*mock.Call
}

// AddIssueToActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddIssueToActivity(_a0 interface{}, _a1 interface{}) *MockDatabase_AddIssueToActivity_Call {
	return &MockDatabase_AddIssueToActivity_Call{Call: _e.mock.On("AddIssueToActivity", _a0, _a1)}
}

func (_c *MockDatabase_AddIssueToActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddIssueToActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddIssueToActivity_Call) Return(_a0 error) *MockDatabase_AddIssueToActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddIssueToActivity_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddIssueToActivity_Call {
	_c.Call.Return(run)
	return _c
}

// AddOwnerToService provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddOwnerToService(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOwnerToService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddOwnerToService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwnerToService'
type MockDatabase_AddOwnerToService_Call struct {
	*mock.Call
}

// AddOwnerToService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddOwnerToService(_a0 interface{}, _a1 interface{}) *MockDatabase_AddOwnerToService_Call {
	return &MockDatabase_AddOwnerToService_Call{Call: _e.mock.On("AddOwnerToService", _a0, _a1)}
}

func (_c *MockDatabase_AddOwnerToService_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddOwnerToService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddOwnerToService_Call) Return(_a0 error) *MockDatabase_AddOwnerToService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddOwnerToService_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddOwnerToService_Call {
	_c.Call.Return(run)
	return _c
}

// AddServiceToActivity provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddServiceToActivity(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceToActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddServiceToActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceToActivity'
type MockDatabase_AddServiceToActivity_Call struct {
	*mock.Call
}

// AddServiceToActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddServiceToActivity(_a0 interface{}, _a1 interface{}) *MockDatabase_AddServiceToActivity_Call {
	return &MockDatabase_AddServiceToActivity_Call{Call: _e.mock.On("AddServiceToActivity", _a0, _a1)}
}

func (_c *MockDatabase_AddServiceToActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddServiceToActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddServiceToActivity_Call) Return(_a0 error) *MockDatabase_AddServiceToActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddServiceToActivity_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddServiceToActivity_Call {
	_c.Call.Return(run)
	return _c
}

// AddServiceToSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddServiceToSupportGroup(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceToSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddServiceToSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceToSupportGroup'
type MockDatabase_AddServiceToSupportGroup_Call struct {
	*mock.Call
}

// AddServiceToSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddServiceToSupportGroup(_a0 interface{}, _a1 interface{}) *MockDatabase_AddServiceToSupportGroup_Call {
	return &MockDatabase_AddServiceToSupportGroup_Call{Call: _e.mock.On("AddServiceToSupportGroup", _a0, _a1)}
}

func (_c *MockDatabase_AddServiceToSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddServiceToSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddServiceToSupportGroup_Call) Return(_a0 error) *MockDatabase_AddServiceToSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddServiceToSupportGroup_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddServiceToSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) AddUserToSupportGroup(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddUserToSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToSupportGroup'
type MockDatabase_AddUserToSupportGroup_Call struct {
	*mock.Call
}

// AddUserToSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) AddUserToSupportGroup(_a0 interface{}, _a1 interface{}) *MockDatabase_AddUserToSupportGroup_Call {
	return &MockDatabase_AddUserToSupportGroup_Call{Call: _e.mock.On("AddUserToSupportGroup", _a0, _a1)}
}

func (_c *MockDatabase_AddUserToSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_AddUserToSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_AddUserToSupportGroup_Call) Return(_a0 error) *MockDatabase_AddUserToSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddUserToSupportGroup_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_AddUserToSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CloseConnection provides a mock function with given fields:
func (_m *MockDatabase) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CloseConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConnection'
type MockDatabase_CloseConnection_Call struct {
	*mock.Call
}

// CloseConnection is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) CloseConnection() *MockDatabase_CloseConnection_Call {
	return &MockDatabase_CloseConnection_Call{Call: _e.mock.On("CloseConnection")}
}

func (_c *MockDatabase_CloseConnection_Call) Run(run func()) *MockDatabase_CloseConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_CloseConnection_Call) Return(_a0 error) *MockDatabase_CloseConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CloseConnection_Call) RunAndReturn(run func() error) *MockDatabase_CloseConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CountActivities provides a mock function with given fields: _a0
func (_m *MockDatabase) CountActivities(_a0 *entity.ActivityFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountActivities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.ActivityFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountActivities'
type MockDatabase_CountActivities_Call struct {
	*mock.Call
}

// CountActivities is a helper method to define mock.On call
//   - _a0 *entity.ActivityFilter
func (_e *MockDatabase_Expecter) CountActivities(_a0 interface{}) *MockDatabase_CountActivities_Call {
	return &MockDatabase_CountActivities_Call{Call: _e.mock.On("CountActivities", _a0)}
}

func (_c *MockDatabase_CountActivities_Call) Run(run func(_a0 *entity.ActivityFilter)) *MockDatabase_CountActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ActivityFilter))
	})
	return _c
}

func (_c *MockDatabase_CountActivities_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountActivities_Call) RunAndReturn(run func(*entity.ActivityFilter) (int64, error)) *MockDatabase_CountActivities_Call {
	_c.Call.Return(run)
	return _c
}

// CountComponentInstances provides a mock function with given fields: _a0
func (_m *MockDatabase) CountComponentInstances(_a0 *entity.ComponentInstanceFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountComponentInstances")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstanceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountComponentInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountComponentInstances'
type MockDatabase_CountComponentInstances_Call struct {
	*mock.Call
}

// CountComponentInstances is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstanceFilter
func (_e *MockDatabase_Expecter) CountComponentInstances(_a0 interface{}) *MockDatabase_CountComponentInstances_Call {
	return &MockDatabase_CountComponentInstances_Call{Call: _e.mock.On("CountComponentInstances", _a0)}
}

func (_c *MockDatabase_CountComponentInstances_Call) Run(run func(_a0 *entity.ComponentInstanceFilter)) *MockDatabase_CountComponentInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstanceFilter))
	})
	return _c
}

func (_c *MockDatabase_CountComponentInstances_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountComponentInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountComponentInstances_Call) RunAndReturn(run func(*entity.ComponentInstanceFilter) (int64, error)) *MockDatabase_CountComponentInstances_Call {
	_c.Call.Return(run)
	return _c
}

// CountComponentVersions provides a mock function with given fields: _a0
func (_m *MockDatabase) CountComponentVersions(_a0 *entity.ComponentVersionFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountComponentVersions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersionFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountComponentVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountComponentVersions'
type MockDatabase_CountComponentVersions_Call struct {
	*mock.Call
}

// CountComponentVersions is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersionFilter
func (_e *MockDatabase_Expecter) CountComponentVersions(_a0 interface{}) *MockDatabase_CountComponentVersions_Call {
	return &MockDatabase_CountComponentVersions_Call{Call: _e.mock.On("CountComponentVersions", _a0)}
}

func (_c *MockDatabase_CountComponentVersions_Call) Run(run func(_a0 *entity.ComponentVersionFilter)) *MockDatabase_CountComponentVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersionFilter))
	})
	return _c
}

func (_c *MockDatabase_CountComponentVersions_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountComponentVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountComponentVersions_Call) RunAndReturn(run func(*entity.ComponentVersionFilter) (int64, error)) *MockDatabase_CountComponentVersions_Call {
	_c.Call.Return(run)
	return _c
}

// CountComponents provides a mock function with given fields: _a0
func (_m *MockDatabase) CountComponents(_a0 *entity.ComponentFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountComponents")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountComponents'
type MockDatabase_CountComponents_Call struct {
	*mock.Call
}

// CountComponents is a helper method to define mock.On call
//   - _a0 *entity.ComponentFilter
func (_e *MockDatabase_Expecter) CountComponents(_a0 interface{}) *MockDatabase_CountComponents_Call {
	return &MockDatabase_CountComponents_Call{Call: _e.mock.On("CountComponents", _a0)}
}

func (_c *MockDatabase_CountComponents_Call) Run(run func(_a0 *entity.ComponentFilter)) *MockDatabase_CountComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter))
	})
	return _c
}

func (_c *MockDatabase_CountComponents_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountComponents_Call) RunAndReturn(run func(*entity.ComponentFilter) (int64, error)) *MockDatabase_CountComponents_Call {
	_c.Call.Return(run)
	return _c
}

// CountEvidences provides a mock function with given fields: _a0
func (_m *MockDatabase) CountEvidences(_a0 *entity.EvidenceFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountEvidences")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.EvidenceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountEvidences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountEvidences'
type MockDatabase_CountEvidences_Call struct {
	*mock.Call
}

// CountEvidences is a helper method to define mock.On call
//   - _a0 *entity.EvidenceFilter
func (_e *MockDatabase_Expecter) CountEvidences(_a0 interface{}) *MockDatabase_CountEvidences_Call {
	return &MockDatabase_CountEvidences_Call{Call: _e.mock.On("CountEvidences", _a0)}
}

func (_c *MockDatabase_CountEvidences_Call) Run(run func(_a0 *entity.EvidenceFilter)) *MockDatabase_CountEvidences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.EvidenceFilter))
	})
	return _c
}

func (_c *MockDatabase_CountEvidences_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountEvidences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountEvidences_Call) RunAndReturn(run func(*entity.EvidenceFilter) (int64, error)) *MockDatabase_CountEvidences_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssueMatchChanges provides a mock function with given fields: filter
func (_m *MockDatabase) CountIssueMatchChanges(filter *entity.IssueMatchChangeFilter) (int64, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for CountIssueMatchChanges")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) (int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) int64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChangeFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssueMatchChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssueMatchChanges'
type MockDatabase_CountIssueMatchChanges_Call struct {
	*mock.Call
}

// CountIssueMatchChanges is a helper method to define mock.On call
//   - filter *entity.IssueMatchChangeFilter
func (_e *MockDatabase_Expecter) CountIssueMatchChanges(filter interface{}) *MockDatabase_CountIssueMatchChanges_Call {
	return &MockDatabase_CountIssueMatchChanges_Call{Call: _e.mock.On("CountIssueMatchChanges", filter)}
}

func (_c *MockDatabase_CountIssueMatchChanges_Call) Run(run func(filter *entity.IssueMatchChangeFilter)) *MockDatabase_CountIssueMatchChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChangeFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssueMatchChanges_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountIssueMatchChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssueMatchChanges_Call) RunAndReturn(run func(*entity.IssueMatchChangeFilter) (int64, error)) *MockDatabase_CountIssueMatchChanges_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssueMatches provides a mock function with given fields: filter
func (_m *MockDatabase) CountIssueMatches(filter *entity.IssueMatchFilter) (int64, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for CountIssueMatches")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) (int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) int64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssueMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssueMatches'
type MockDatabase_CountIssueMatches_Call struct {
	*mock.Call
}

// CountIssueMatches is a helper method to define mock.On call
//   - filter *entity.IssueMatchFilter
func (_e *MockDatabase_Expecter) CountIssueMatches(filter interface{}) *MockDatabase_CountIssueMatches_Call {
	return &MockDatabase_CountIssueMatches_Call{Call: _e.mock.On("CountIssueMatches", filter)}
}

func (_c *MockDatabase_CountIssueMatches_Call) Run(run func(filter *entity.IssueMatchFilter)) *MockDatabase_CountIssueMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssueMatches_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountIssueMatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssueMatches_Call) RunAndReturn(run func(*entity.IssueMatchFilter) (int64, error)) *MockDatabase_CountIssueMatches_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssueRepositories provides a mock function with given fields: _a0
func (_m *MockDatabase) CountIssueRepositories(_a0 *entity.IssueRepositoryFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountIssueRepositories")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepositoryFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssueRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssueRepositories'
type MockDatabase_CountIssueRepositories_Call struct {
	*mock.Call
}

// CountIssueRepositories is a helper method to define mock.On call
//   - _a0 *entity.IssueRepositoryFilter
func (_e *MockDatabase_Expecter) CountIssueRepositories(_a0 interface{}) *MockDatabase_CountIssueRepositories_Call {
	return &MockDatabase_CountIssueRepositories_Call{Call: _e.mock.On("CountIssueRepositories", _a0)}
}

func (_c *MockDatabase_CountIssueRepositories_Call) Run(run func(_a0 *entity.IssueRepositoryFilter)) *MockDatabase_CountIssueRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepositoryFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssueRepositories_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountIssueRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssueRepositories_Call) RunAndReturn(run func(*entity.IssueRepositoryFilter) (int64, error)) *MockDatabase_CountIssueRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssueTypes provides a mock function with given fields: _a0
func (_m *MockDatabase) CountIssueTypes(_a0 *entity.IssueFilter) (*entity.IssueTypeCounts, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountIssueTypes")
	}

	var r0 *entity.IssueTypeCounts
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) (*entity.IssueTypeCounts, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) *entity.IssueTypeCounts); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueTypeCounts)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssueTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssueTypes'
type MockDatabase_CountIssueTypes_Call struct {
	*mock.Call
}

// CountIssueTypes is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) CountIssueTypes(_a0 interface{}) *MockDatabase_CountIssueTypes_Call {
	return &MockDatabase_CountIssueTypes_Call{Call: _e.mock.On("CountIssueTypes", _a0)}
}

func (_c *MockDatabase_CountIssueTypes_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_CountIssueTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssueTypes_Call) Return(_a0 *entity.IssueTypeCounts, _a1 error) *MockDatabase_CountIssueTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssueTypes_Call) RunAndReturn(run func(*entity.IssueFilter) (*entity.IssueTypeCounts, error)) *MockDatabase_CountIssueTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssueVariants provides a mock function with given fields: _a0
func (_m *MockDatabase) CountIssueVariants(_a0 *entity.IssueVariantFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountIssueVariants")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariantFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssueVariants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssueVariants'
type MockDatabase_CountIssueVariants_Call struct {
	*mock.Call
}

// CountIssueVariants is a helper method to define mock.On call
//   - _a0 *entity.IssueVariantFilter
func (_e *MockDatabase_Expecter) CountIssueVariants(_a0 interface{}) *MockDatabase_CountIssueVariants_Call {
	return &MockDatabase_CountIssueVariants_Call{Call: _e.mock.On("CountIssueVariants", _a0)}
}

func (_c *MockDatabase_CountIssueVariants_Call) Run(run func(_a0 *entity.IssueVariantFilter)) *MockDatabase_CountIssueVariants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariantFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssueVariants_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountIssueVariants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssueVariants_Call) RunAndReturn(run func(*entity.IssueVariantFilter) (int64, error)) *MockDatabase_CountIssueVariants_Call {
	_c.Call.Return(run)
	return _c
}

// CountIssues provides a mock function with given fields: _a0
func (_m *MockDatabase) CountIssues(_a0 *entity.IssueFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountIssues")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountIssues'
type MockDatabase_CountIssues_Call struct {
	*mock.Call
}

// CountIssues is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) CountIssues(_a0 interface{}) *MockDatabase_CountIssues_Call {
	return &MockDatabase_CountIssues_Call{Call: _e.mock.On("CountIssues", _a0)}
}

func (_c *MockDatabase_CountIssues_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_CountIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_CountIssues_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountIssues_Call) RunAndReturn(run func(*entity.IssueFilter) (int64, error)) *MockDatabase_CountIssues_Call {
	_c.Call.Return(run)
	return _c
}

// CountServices provides a mock function with given fields: _a0
func (_m *MockDatabase) CountServices(_a0 *entity.ServiceFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountServices")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountServices'
type MockDatabase_CountServices_Call struct {
	*mock.Call
}

// CountServices is a helper method to define mock.On call
//   - _a0 *entity.ServiceFilter
func (_e *MockDatabase_Expecter) CountServices(_a0 interface{}) *MockDatabase_CountServices_Call {
	return &MockDatabase_CountServices_Call{Call: _e.mock.On("CountServices", _a0)}
}

func (_c *MockDatabase_CountServices_Call) Run(run func(_a0 *entity.ServiceFilter)) *MockDatabase_CountServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter))
	})
	return _c
}

func (_c *MockDatabase_CountServices_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountServices_Call) RunAndReturn(run func(*entity.ServiceFilter) (int64, error)) *MockDatabase_CountServices_Call {
	_c.Call.Return(run)
	return _c
}

// CountSupportGroups provides a mock function with given fields: _a0
func (_m *MockDatabase) CountSupportGroups(_a0 *entity.SupportGroupFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountSupportGroups")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountSupportGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSupportGroups'
type MockDatabase_CountSupportGroups_Call struct {
	*mock.Call
}

// CountSupportGroups is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
func (_e *MockDatabase_Expecter) CountSupportGroups(_a0 interface{}) *MockDatabase_CountSupportGroups_Call {
	return &MockDatabase_CountSupportGroups_Call{Call: _e.mock.On("CountSupportGroups", _a0)}
}

func (_c *MockDatabase_CountSupportGroups_Call) Run(run func(_a0 *entity.SupportGroupFilter)) *MockDatabase_CountSupportGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter))
	})
	return _c
}

func (_c *MockDatabase_CountSupportGroups_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountSupportGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountSupportGroups_Call) RunAndReturn(run func(*entity.SupportGroupFilter) (int64, error)) *MockDatabase_CountSupportGroups_Call {
	_c.Call.Return(run)
	return _c
}

// CountUsers provides a mock function with given fields: _a0
func (_m *MockDatabase) CountUsers(_a0 *entity.UserFilter) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CountUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUsers'
type MockDatabase_CountUsers_Call struct {
	*mock.Call
}

// CountUsers is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
func (_e *MockDatabase_Expecter) CountUsers(_a0 interface{}) *MockDatabase_CountUsers_Call {
	return &MockDatabase_CountUsers_Call{Call: _e.mock.On("CountUsers", _a0)}
}

func (_c *MockDatabase_CountUsers_Call) Run(run func(_a0 *entity.UserFilter)) *MockDatabase_CountUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter))
	})
	return _c
}

func (_c *MockDatabase_CountUsers_Call) Return(_a0 int64, _a1 error) *MockDatabase_CountUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CountUsers_Call) RunAndReturn(run func(*entity.UserFilter) (int64, error)) *MockDatabase_CountUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateActivity provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateActivity(_a0 *entity.Activity) (*entity.Activity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Activity) (*entity.Activity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Activity) *entity.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Activity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateActivity'
type MockDatabase_CreateActivity_Call struct {
	*mock.Call
}

// CreateActivity is a helper method to define mock.On call
//   - _a0 *entity.Activity
func (_e *MockDatabase_Expecter) CreateActivity(_a0 interface{}) *MockDatabase_CreateActivity_Call {
	return &MockDatabase_CreateActivity_Call{Call: _e.mock.On("CreateActivity", _a0)}
}

func (_c *MockDatabase_CreateActivity_Call) Run(run func(_a0 *entity.Activity)) *MockDatabase_CreateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Activity))
	})
	return _c
}

func (_c *MockDatabase_CreateActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockDatabase_CreateActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateActivity_Call) RunAndReturn(run func(*entity.Activity) (*entity.Activity, error)) *MockDatabase_CreateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponent provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateComponent(_a0 *entity.Component) (*entity.Component, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 *entity.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Component) (*entity.Component, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Component) *entity.Component); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Component) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponent'
type MockDatabase_CreateComponent_Call struct {
	*mock.Call
}

// CreateComponent is a helper method to define mock.On call
//   - _a0 *entity.Component
func (_e *MockDatabase_Expecter) CreateComponent(_a0 interface{}) *MockDatabase_CreateComponent_Call {
	return &MockDatabase_CreateComponent_Call{Call: _e.mock.On("CreateComponent", _a0)}
}

func (_c *MockDatabase_CreateComponent_Call) Run(run func(_a0 *entity.Component)) *MockDatabase_CreateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Component))
	})
	return _c
}

func (_c *MockDatabase_CreateComponent_Call) Return(_a0 *entity.Component, _a1 error) *MockDatabase_CreateComponent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateComponent_Call) RunAndReturn(run func(*entity.Component) (*entity.Component, error)) *MockDatabase_CreateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentInstance provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateComponentInstance(_a0 *entity.ComponentInstance) (*entity.ComponentInstance, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentInstance")
	}

	var r0 *entity.ComponentInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) (*entity.ComponentInstance, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) *entity.ComponentInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentInstance'
type MockDatabase_CreateComponentInstance_Call struct {
	*mock.Call
}

// CreateComponentInstance is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstance
func (_e *MockDatabase_Expecter) CreateComponentInstance(_a0 interface{}) *MockDatabase_CreateComponentInstance_Call {
	return &MockDatabase_CreateComponentInstance_Call{Call: _e.mock.On("CreateComponentInstance", _a0)}
}

func (_c *MockDatabase_CreateComponentInstance_Call) Run(run func(_a0 *entity.ComponentInstance)) *MockDatabase_CreateComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstance))
	})
	return _c
}

func (_c *MockDatabase_CreateComponentInstance_Call) Return(_a0 *entity.ComponentInstance, _a1 error) *MockDatabase_CreateComponentInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateComponentInstance_Call) RunAndReturn(run func(*entity.ComponentInstance) (*entity.ComponentInstance, error)) *MockDatabase_CreateComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentVersion provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateComponentVersion(_a0 *entity.ComponentVersion) (*entity.ComponentVersion, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentVersion")
	}

	var r0 *entity.ComponentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) (*entity.ComponentVersion, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) *entity.ComponentVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersion) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentVersion'
type MockDatabase_CreateComponentVersion_Call struct {
	*mock.Call
}

// CreateComponentVersion is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersion
func (_e *MockDatabase_Expecter) CreateComponentVersion(_a0 interface{}) *MockDatabase_CreateComponentVersion_Call {
	return &MockDatabase_CreateComponentVersion_Call{Call: _e.mock.On("CreateComponentVersion", _a0)}
}

func (_c *MockDatabase_CreateComponentVersion_Call) Run(run func(_a0 *entity.ComponentVersion)) *MockDatabase_CreateComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersion))
	})
	return _c
}

func (_c *MockDatabase_CreateComponentVersion_Call) Return(_a0 *entity.ComponentVersion, _a1 error) *MockDatabase_CreateComponentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateComponentVersion_Call) RunAndReturn(run func(*entity.ComponentVersion) (*entity.ComponentVersion, error)) *MockDatabase_CreateComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvidence provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateEvidence(_a0 *entity.Evidence) (*entity.Evidence, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvidence")
	}

	var r0 *entity.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Evidence) (*entity.Evidence, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Evidence) *entity.Evidence); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Evidence) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvidence'
type MockDatabase_CreateEvidence_Call struct {
	*mock.Call
}

// CreateEvidence is a helper method to define mock.On call
//   - _a0 *entity.Evidence
func (_e *MockDatabase_Expecter) CreateEvidence(_a0 interface{}) *MockDatabase_CreateEvidence_Call {
	return &MockDatabase_CreateEvidence_Call{Call: _e.mock.On("CreateEvidence", _a0)}
}

func (_c *MockDatabase_CreateEvidence_Call) Run(run func(_a0 *entity.Evidence)) *MockDatabase_CreateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Evidence))
	})
	return _c
}

func (_c *MockDatabase_CreateEvidence_Call) Return(_a0 *entity.Evidence, _a1 error) *MockDatabase_CreateEvidence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateEvidence_Call) RunAndReturn(run func(*entity.Evidence) (*entity.Evidence, error)) *MockDatabase_CreateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssue provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateIssue(_a0 *entity.Issue) (*entity.Issue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Issue) (*entity.Issue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Issue) *entity.Issue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Issue) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type MockDatabase_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - _a0 *entity.Issue
func (_e *MockDatabase_Expecter) CreateIssue(_a0 interface{}) *MockDatabase_CreateIssue_Call {
	return &MockDatabase_CreateIssue_Call{Call: _e.mock.On("CreateIssue", _a0)}
}

func (_c *MockDatabase_CreateIssue_Call) Run(run func(_a0 *entity.Issue)) *MockDatabase_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Issue))
	})
	return _c
}

func (_c *MockDatabase_CreateIssue_Call) Return(_a0 *entity.Issue, _a1 error) *MockDatabase_CreateIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateIssue_Call) RunAndReturn(run func(*entity.Issue) (*entity.Issue, error)) *MockDatabase_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueMatch provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateIssueMatch(_a0 *entity.IssueMatch) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) (*entity.IssueMatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) *entity.IssueMatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatch) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueMatch'
type MockDatabase_CreateIssueMatch_Call struct {
	*mock.Call
}

// CreateIssueMatch is a helper method to define mock.On call
//   - _a0 *entity.IssueMatch
func (_e *MockDatabase_Expecter) CreateIssueMatch(_a0 interface{}) *MockDatabase_CreateIssueMatch_Call {
	return &MockDatabase_CreateIssueMatch_Call{Call: _e.mock.On("CreateIssueMatch", _a0)}
}

func (_c *MockDatabase_CreateIssueMatch_Call) Run(run func(_a0 *entity.IssueMatch)) *MockDatabase_CreateIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatch))
	})
	return _c
}

func (_c *MockDatabase_CreateIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockDatabase_CreateIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateIssueMatch_Call) RunAndReturn(run func(*entity.IssueMatch) (*entity.IssueMatch, error)) *MockDatabase_CreateIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateIssueMatchChange(_a0 *entity.IssueMatchChange) (*entity.IssueMatchChange, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueMatchChange")
	}

	var r0 *entity.IssueMatchChange
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) *entity.IssueMatchChange); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatchChange)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChange) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueMatchChange'
type MockDatabase_CreateIssueMatchChange_Call struct {
	*mock.Call
}

// CreateIssueMatchChange is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChange
func (_e *MockDatabase_Expecter) CreateIssueMatchChange(_a0 interface{}) *MockDatabase_CreateIssueMatchChange_Call {
	return &MockDatabase_CreateIssueMatchChange_Call{Call: _e.mock.On("CreateIssueMatchChange", _a0)}
}

func (_c *MockDatabase_CreateIssueMatchChange_Call) Run(run func(_a0 *entity.IssueMatchChange)) *MockDatabase_CreateIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChange))
	})
	return _c
}

func (_c *MockDatabase_CreateIssueMatchChange_Call) Return(_a0 *entity.IssueMatchChange, _a1 error) *MockDatabase_CreateIssueMatchChange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateIssueMatchChange_Call) RunAndReturn(run func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)) *MockDatabase_CreateIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueRepository provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateIssueRepository(_a0 *entity.IssueRepository) (*entity.IssueRepository, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueRepository")
	}

	var r0 *entity.IssueRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) (*entity.IssueRepository, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) *entity.IssueRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepository) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueRepository'
type MockDatabase_CreateIssueRepository_Call struct {
	*mock.Call
}

// CreateIssueRepository is a helper method to define mock.On call
//   - _a0 *entity.IssueRepository
func (_e *MockDatabase_Expecter) CreateIssueRepository(_a0 interface{}) *MockDatabase_CreateIssueRepository_Call {
	return &MockDatabase_CreateIssueRepository_Call{Call: _e.mock.On("CreateIssueRepository", _a0)}
}

func (_c *MockDatabase_CreateIssueRepository_Call) Run(run func(_a0 *entity.IssueRepository)) *MockDatabase_CreateIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepository))
	})
	return _c
}

func (_c *MockDatabase_CreateIssueRepository_Call) Return(_a0 *entity.IssueRepository, _a1 error) *MockDatabase_CreateIssueRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateIssueRepository_Call) RunAndReturn(run func(*entity.IssueRepository) (*entity.IssueRepository, error)) *MockDatabase_CreateIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueVariant provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateIssueVariant(_a0 *entity.IssueVariant) (*entity.IssueVariant, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueVariant")
	}

	var r0 *entity.IssueVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) (*entity.IssueVariant, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) *entity.IssueVariant); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariant) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueVariant'
type MockDatabase_CreateIssueVariant_Call struct {
	*mock.Call
}

// CreateIssueVariant is a helper method to define mock.On call
//   - _a0 *entity.IssueVariant
func (_e *MockDatabase_Expecter) CreateIssueVariant(_a0 interface{}) *MockDatabase_CreateIssueVariant_Call {
	return &MockDatabase_CreateIssueVariant_Call{Call: _e.mock.On("CreateIssueVariant", _a0)}
}

func (_c *MockDatabase_CreateIssueVariant_Call) Run(run func(_a0 *entity.IssueVariant)) *MockDatabase_CreateIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariant))
	})
	return _c
}

func (_c *MockDatabase_CreateIssueVariant_Call) Return(_a0 *entity.IssueVariant, _a1 error) *MockDatabase_CreateIssueVariant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateIssueVariant_Call) RunAndReturn(run func(*entity.IssueVariant) (*entity.IssueVariant, error)) *MockDatabase_CreateIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateService(_a0 *entity.Service) (*entity.Service, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Service) (*entity.Service, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Service) *entity.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Service) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockDatabase_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - _a0 *entity.Service
func (_e *MockDatabase_Expecter) CreateService(_a0 interface{}) *MockDatabase_CreateService_Call {
	return &MockDatabase_CreateService_Call{Call: _e.mock.On("CreateService", _a0)}
}

func (_c *MockDatabase_CreateService_Call) Run(run func(_a0 *entity.Service)) *MockDatabase_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Service))
	})
	return _c
}

func (_c *MockDatabase_CreateService_Call) Return(_a0 *entity.Service, _a1 error) *MockDatabase_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateService_Call) RunAndReturn(run func(*entity.Service) (*entity.Service, error)) *MockDatabase_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSupportGroup provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateSupportGroup(_a0 *entity.SupportGroup) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) (*entity.SupportGroup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) *entity.SupportGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroup) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSupportGroup'
type MockDatabase_CreateSupportGroup_Call struct {
	*mock.Call
}

// CreateSupportGroup is a helper method to define mock.On call
//   - _a0 *entity.SupportGroup
func (_e *MockDatabase_Expecter) CreateSupportGroup(_a0 interface{}) *MockDatabase_CreateSupportGroup_Call {
	return &MockDatabase_CreateSupportGroup_Call{Call: _e.mock.On("CreateSupportGroup", _a0)}
}

func (_c *MockDatabase_CreateSupportGroup_Call) Run(run func(_a0 *entity.SupportGroup)) *MockDatabase_CreateSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroup))
	})
	return _c
}

func (_c *MockDatabase_CreateSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockDatabase_CreateSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateSupportGroup_Call) RunAndReturn(run func(*entity.SupportGroup) (*entity.SupportGroup, error)) *MockDatabase_CreateSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockDatabase) CreateUser(_a0 *entity.User) (*entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.User) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDatabase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockDatabase_Expecter) CreateUser(_a0 interface{}) *MockDatabase_CreateUser_Call {
	return &MockDatabase_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockDatabase_CreateUser_Call) Run(run func(_a0 *entity.User)) *MockDatabase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockDatabase_CreateUser_Call) Return(_a0 *entity.User, _a1 error) *MockDatabase_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateUser_Call) RunAndReturn(run func(*entity.User) (*entity.User, error)) *MockDatabase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteActivity provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteActivity(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteActivity'
type MockDatabase_DeleteActivity_Call struct {
	*mock.Call
}

// DeleteActivity is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteActivity(_a0 interface{}) *MockDatabase_DeleteActivity_Call {
	return &MockDatabase_DeleteActivity_Call{Call: _e.mock.On("DeleteActivity", _a0)}
}

func (_c *MockDatabase_DeleteActivity_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteActivity_Call) Return(_a0 error) *MockDatabase_DeleteActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteActivity_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteActivity_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponent provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteComponent(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponent'
type MockDatabase_DeleteComponent_Call struct {
	*mock.Call
}

// DeleteComponent is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteComponent(_a0 interface{}) *MockDatabase_DeleteComponent_Call {
	return &MockDatabase_DeleteComponent_Call{Call: _e.mock.On("DeleteComponent", _a0)}
}

func (_c *MockDatabase_DeleteComponent_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteComponent_Call) Return(_a0 error) *MockDatabase_DeleteComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteComponent_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteComponent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentInstance provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteComponentInstance(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentInstance'
type MockDatabase_DeleteComponentInstance_Call struct {
	*mock.Call
}

// DeleteComponentInstance is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteComponentInstance(_a0 interface{}) *MockDatabase_DeleteComponentInstance_Call {
	return &MockDatabase_DeleteComponentInstance_Call{Call: _e.mock.On("DeleteComponentInstance", _a0)}
}

func (_c *MockDatabase_DeleteComponentInstance_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteComponentInstance_Call) Return(_a0 error) *MockDatabase_DeleteComponentInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteComponentInstance_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentVersion provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteComponentVersion(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentVersion'
type MockDatabase_DeleteComponentVersion_Call struct {
	*mock.Call
}

// DeleteComponentVersion is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteComponentVersion(_a0 interface{}) *MockDatabase_DeleteComponentVersion_Call {
	return &MockDatabase_DeleteComponentVersion_Call{Call: _e.mock.On("DeleteComponentVersion", _a0)}
}

func (_c *MockDatabase_DeleteComponentVersion_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteComponentVersion_Call) Return(_a0 error) *MockDatabase_DeleteComponentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteComponentVersion_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvidence provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteEvidence(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvidence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvidence'
type MockDatabase_DeleteEvidence_Call struct {
	*mock.Call
}

// DeleteEvidence is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteEvidence(_a0 interface{}) *MockDatabase_DeleteEvidence_Call {
	return &MockDatabase_DeleteEvidence_Call{Call: _e.mock.On("DeleteEvidence", _a0)}
}

func (_c *MockDatabase_DeleteEvidence_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteEvidence_Call) Return(_a0 error) *MockDatabase_DeleteEvidence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteEvidence_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssue provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteIssue(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssue'
type MockDatabase_DeleteIssue_Call struct {
	*mock.Call
}

// DeleteIssue is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteIssue(_a0 interface{}) *MockDatabase_DeleteIssue_Call {
	return &MockDatabase_DeleteIssue_Call{Call: _e.mock.On("DeleteIssue", _a0)}
}

func (_c *MockDatabase_DeleteIssue_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteIssue_Call) Return(_a0 error) *MockDatabase_DeleteIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteIssue_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteIssue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueMatch provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteIssueMatch(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueMatch'
type MockDatabase_DeleteIssueMatch_Call struct {
	*mock.Call
}

// DeleteIssueMatch is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteIssueMatch(_a0 interface{}) *MockDatabase_DeleteIssueMatch_Call {
	return &MockDatabase_DeleteIssueMatch_Call{Call: _e.mock.On("DeleteIssueMatch", _a0)}
}

func (_c *MockDatabase_DeleteIssueMatch_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteIssueMatch_Call) Return(_a0 error) *MockDatabase_DeleteIssueMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteIssueMatch_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteIssueMatchChange(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueMatchChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueMatchChange'
type MockDatabase_DeleteIssueMatchChange_Call struct {
	*mock.Call
}

// DeleteIssueMatchChange is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteIssueMatchChange(_a0 interface{}) *MockDatabase_DeleteIssueMatchChange_Call {
	return &MockDatabase_DeleteIssueMatchChange_Call{Call: _e.mock.On("DeleteIssueMatchChange", _a0)}
}

func (_c *MockDatabase_DeleteIssueMatchChange_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteIssueMatchChange_Call) Return(_a0 error) *MockDatabase_DeleteIssueMatchChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteIssueMatchChange_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueRepository provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteIssueRepository(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueRepository'
type MockDatabase_DeleteIssueRepository_Call struct {
	*mock.Call
}

// DeleteIssueRepository is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteIssueRepository(_a0 interface{}) *MockDatabase_DeleteIssueRepository_Call {
	return &MockDatabase_DeleteIssueRepository_Call{Call: _e.mock.On("DeleteIssueRepository", _a0)}
}

func (_c *MockDatabase_DeleteIssueRepository_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteIssueRepository_Call) Return(_a0 error) *MockDatabase_DeleteIssueRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteIssueRepository_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueVariant provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteIssueVariant(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueVariant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueVariant'
type MockDatabase_DeleteIssueVariant_Call struct {
	*mock.Call
}

// DeleteIssueVariant is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteIssueVariant(_a0 interface{}) *MockDatabase_DeleteIssueVariant_Call {
	return &MockDatabase_DeleteIssueVariant_Call{Call: _e.mock.On("DeleteIssueVariant", _a0)}
}

func (_c *MockDatabase_DeleteIssueVariant_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteIssueVariant_Call) Return(_a0 error) *MockDatabase_DeleteIssueVariant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteIssueVariant_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteService(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockDatabase_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteService(_a0 interface{}) *MockDatabase_DeleteService_Call {
	return &MockDatabase_DeleteService_Call{Call: _e.mock.On("DeleteService", _a0)}
}

func (_c *MockDatabase_DeleteService_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteService_Call) Return(_a0 error) *MockDatabase_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteService_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSupportGroup provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteSupportGroup(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSupportGroup'
type MockDatabase_DeleteSupportGroup_Call struct {
	*mock.Call
}

// DeleteSupportGroup is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteSupportGroup(_a0 interface{}) *MockDatabase_DeleteSupportGroup_Call {
	return &MockDatabase_DeleteSupportGroup_Call{Call: _e.mock.On("DeleteSupportGroup", _a0)}
}

func (_c *MockDatabase_DeleteSupportGroup_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteSupportGroup_Call) Return(_a0 error) *MockDatabase_DeleteSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteSupportGroup_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *MockDatabase) DeleteUser(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDatabase_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockDatabase_Expecter) DeleteUser(_a0 interface{}) *MockDatabase_DeleteUser_Call {
	return &MockDatabase_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0)}
}

func (_c *MockDatabase_DeleteUser_Call) Run(run func(_a0 int64)) *MockDatabase_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) Return(_a0 error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) RunAndReturn(run func(int64) error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivities provides a mock function with given fields: _a0
func (_m *MockDatabase) GetActivities(_a0 *entity.ActivityFilter) ([]entity.Activity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetActivities")
	}

	var r0 []entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) ([]entity.Activity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) []entity.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ActivityFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivities'
type MockDatabase_GetActivities_Call struct {
	*mock.Call
}

// GetActivities is a helper method to define mock.On call
//   - _a0 *entity.ActivityFilter
func (_e *MockDatabase_Expecter) GetActivities(_a0 interface{}) *MockDatabase_GetActivities_Call {
	return &MockDatabase_GetActivities_Call{Call: _e.mock.On("GetActivities", _a0)}
}

func (_c *MockDatabase_GetActivities_Call) Run(run func(_a0 *entity.ActivityFilter)) *MockDatabase_GetActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ActivityFilter))
	})
	return _c
}

func (_c *MockDatabase_GetActivities_Call) Return(_a0 []entity.Activity, _a1 error) *MockDatabase_GetActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetActivities_Call) RunAndReturn(run func(*entity.ActivityFilter) ([]entity.Activity, error)) *MockDatabase_GetActivities_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActivityIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllActivityIds(_a0 *entity.ActivityFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllActivityIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ActivityFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllActivityIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActivityIds'
type MockDatabase_GetAllActivityIds_Call struct {
	*mock.Call
}

// GetAllActivityIds is a helper method to define mock.On call
//   - _a0 *entity.ActivityFilter
func (_e *MockDatabase_Expecter) GetAllActivityIds(_a0 interface{}) *MockDatabase_GetAllActivityIds_Call {
	return &MockDatabase_GetAllActivityIds_Call{Call: _e.mock.On("GetAllActivityIds", _a0)}
}

func (_c *MockDatabase_GetAllActivityIds_Call) Run(run func(_a0 *entity.ActivityFilter)) *MockDatabase_GetAllActivityIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ActivityFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllActivityIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllActivityIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllActivityIds_Call) RunAndReturn(run func(*entity.ActivityFilter) ([]int64, error)) *MockDatabase_GetAllActivityIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponentIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllComponentIds(_a0 *entity.ComponentFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponentIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllComponentIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponentIds'
type MockDatabase_GetAllComponentIds_Call struct {
	*mock.Call
}

// GetAllComponentIds is a helper method to define mock.On call
//   - _a0 *entity.ComponentFilter
func (_e *MockDatabase_Expecter) GetAllComponentIds(_a0 interface{}) *MockDatabase_GetAllComponentIds_Call {
	return &MockDatabase_GetAllComponentIds_Call{Call: _e.mock.On("GetAllComponentIds", _a0)}
}

func (_c *MockDatabase_GetAllComponentIds_Call) Run(run func(_a0 *entity.ComponentFilter)) *MockDatabase_GetAllComponentIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllComponentIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllComponentIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllComponentIds_Call) RunAndReturn(run func(*entity.ComponentFilter) ([]int64, error)) *MockDatabase_GetAllComponentIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponentInstanceIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllComponentInstanceIds(_a0 *entity.ComponentInstanceFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponentInstanceIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstanceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllComponentInstanceIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponentInstanceIds'
type MockDatabase_GetAllComponentInstanceIds_Call struct {
	*mock.Call
}

// GetAllComponentInstanceIds is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstanceFilter
func (_e *MockDatabase_Expecter) GetAllComponentInstanceIds(_a0 interface{}) *MockDatabase_GetAllComponentInstanceIds_Call {
	return &MockDatabase_GetAllComponentInstanceIds_Call{Call: _e.mock.On("GetAllComponentInstanceIds", _a0)}
}

func (_c *MockDatabase_GetAllComponentInstanceIds_Call) Run(run func(_a0 *entity.ComponentInstanceFilter)) *MockDatabase_GetAllComponentInstanceIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstanceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllComponentInstanceIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllComponentInstanceIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllComponentInstanceIds_Call) RunAndReturn(run func(*entity.ComponentInstanceFilter) ([]int64, error)) *MockDatabase_GetAllComponentInstanceIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponentVersionIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllComponentVersionIds(_a0 *entity.ComponentVersionFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponentVersionIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersionFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllComponentVersionIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponentVersionIds'
type MockDatabase_GetAllComponentVersionIds_Call struct {
	*mock.Call
}

// GetAllComponentVersionIds is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersionFilter
func (_e *MockDatabase_Expecter) GetAllComponentVersionIds(_a0 interface{}) *MockDatabase_GetAllComponentVersionIds_Call {
	return &MockDatabase_GetAllComponentVersionIds_Call{Call: _e.mock.On("GetAllComponentVersionIds", _a0)}
}

func (_c *MockDatabase_GetAllComponentVersionIds_Call) Run(run func(_a0 *entity.ComponentVersionFilter)) *MockDatabase_GetAllComponentVersionIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersionFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllComponentVersionIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllComponentVersionIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllComponentVersionIds_Call) RunAndReturn(run func(*entity.ComponentVersionFilter) ([]int64, error)) *MockDatabase_GetAllComponentVersionIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEvidenceIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllEvidenceIds(_a0 *entity.EvidenceFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvidenceIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.EvidenceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllEvidenceIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEvidenceIds'
type MockDatabase_GetAllEvidenceIds_Call struct {
	*mock.Call
}

// GetAllEvidenceIds is a helper method to define mock.On call
//   - _a0 *entity.EvidenceFilter
func (_e *MockDatabase_Expecter) GetAllEvidenceIds(_a0 interface{}) *MockDatabase_GetAllEvidenceIds_Call {
	return &MockDatabase_GetAllEvidenceIds_Call{Call: _e.mock.On("GetAllEvidenceIds", _a0)}
}

func (_c *MockDatabase_GetAllEvidenceIds_Call) Run(run func(_a0 *entity.EvidenceFilter)) *MockDatabase_GetAllEvidenceIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.EvidenceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllEvidenceIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllEvidenceIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllEvidenceIds_Call) RunAndReturn(run func(*entity.EvidenceFilter) ([]int64, error)) *MockDatabase_GetAllEvidenceIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIssueIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllIssueIds(_a0 *entity.IssueFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIssueIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllIssueIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIssueIds'
type MockDatabase_GetAllIssueIds_Call struct {
	*mock.Call
}

// GetAllIssueIds is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) GetAllIssueIds(_a0 interface{}) *MockDatabase_GetAllIssueIds_Call {
	return &MockDatabase_GetAllIssueIds_Call{Call: _e.mock.On("GetAllIssueIds", _a0)}
}

func (_c *MockDatabase_GetAllIssueIds_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_GetAllIssueIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllIssueIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllIssueIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllIssueIds_Call) RunAndReturn(run func(*entity.IssueFilter) ([]int64, error)) *MockDatabase_GetAllIssueIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIssueMatchChangeIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllIssueMatchChangeIds(_a0 *entity.IssueMatchChangeFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIssueMatchChangeIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChangeFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllIssueMatchChangeIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIssueMatchChangeIds'
type MockDatabase_GetAllIssueMatchChangeIds_Call struct {
	*mock.Call
}

// GetAllIssueMatchChangeIds is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChangeFilter
func (_e *MockDatabase_Expecter) GetAllIssueMatchChangeIds(_a0 interface{}) *MockDatabase_GetAllIssueMatchChangeIds_Call {
	return &MockDatabase_GetAllIssueMatchChangeIds_Call{Call: _e.mock.On("GetAllIssueMatchChangeIds", _a0)}
}

func (_c *MockDatabase_GetAllIssueMatchChangeIds_Call) Run(run func(_a0 *entity.IssueMatchChangeFilter)) *MockDatabase_GetAllIssueMatchChangeIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChangeFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllIssueMatchChangeIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllIssueMatchChangeIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllIssueMatchChangeIds_Call) RunAndReturn(run func(*entity.IssueMatchChangeFilter) ([]int64, error)) *MockDatabase_GetAllIssueMatchChangeIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIssueMatchIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllIssueMatchIds(_a0 *entity.IssueMatchFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIssueMatchIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllIssueMatchIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIssueMatchIds'
type MockDatabase_GetAllIssueMatchIds_Call struct {
	*mock.Call
}

// GetAllIssueMatchIds is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchFilter
func (_e *MockDatabase_Expecter) GetAllIssueMatchIds(_a0 interface{}) *MockDatabase_GetAllIssueMatchIds_Call {
	return &MockDatabase_GetAllIssueMatchIds_Call{Call: _e.mock.On("GetAllIssueMatchIds", _a0)}
}

func (_c *MockDatabase_GetAllIssueMatchIds_Call) Run(run func(_a0 *entity.IssueMatchFilter)) *MockDatabase_GetAllIssueMatchIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllIssueMatchIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllIssueMatchIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllIssueMatchIds_Call) RunAndReturn(run func(*entity.IssueMatchFilter) ([]int64, error)) *MockDatabase_GetAllIssueMatchIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIssueRepositoryIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllIssueRepositoryIds(_a0 *entity.IssueRepositoryFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIssueRepositoryIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepositoryFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllIssueRepositoryIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIssueRepositoryIds'
type MockDatabase_GetAllIssueRepositoryIds_Call struct {
	*mock.Call
}

// GetAllIssueRepositoryIds is a helper method to define mock.On call
//   - _a0 *entity.IssueRepositoryFilter
func (_e *MockDatabase_Expecter) GetAllIssueRepositoryIds(_a0 interface{}) *MockDatabase_GetAllIssueRepositoryIds_Call {
	return &MockDatabase_GetAllIssueRepositoryIds_Call{Call: _e.mock.On("GetAllIssueRepositoryIds", _a0)}
}

func (_c *MockDatabase_GetAllIssueRepositoryIds_Call) Run(run func(_a0 *entity.IssueRepositoryFilter)) *MockDatabase_GetAllIssueRepositoryIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepositoryFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllIssueRepositoryIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllIssueRepositoryIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllIssueRepositoryIds_Call) RunAndReturn(run func(*entity.IssueRepositoryFilter) ([]int64, error)) *MockDatabase_GetAllIssueRepositoryIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIssueVariantIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllIssueVariantIds(_a0 *entity.IssueVariantFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIssueVariantIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariantFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllIssueVariantIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIssueVariantIds'
type MockDatabase_GetAllIssueVariantIds_Call struct {
	*mock.Call
}

// GetAllIssueVariantIds is a helper method to define mock.On call
//   - _a0 *entity.IssueVariantFilter
func (_e *MockDatabase_Expecter) GetAllIssueVariantIds(_a0 interface{}) *MockDatabase_GetAllIssueVariantIds_Call {
	return &MockDatabase_GetAllIssueVariantIds_Call{Call: _e.mock.On("GetAllIssueVariantIds", _a0)}
}

func (_c *MockDatabase_GetAllIssueVariantIds_Call) Run(run func(_a0 *entity.IssueVariantFilter)) *MockDatabase_GetAllIssueVariantIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariantFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllIssueVariantIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllIssueVariantIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllIssueVariantIds_Call) RunAndReturn(run func(*entity.IssueVariantFilter) ([]int64, error)) *MockDatabase_GetAllIssueVariantIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServiceIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllServiceIds(_a0 *entity.ServiceFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllServiceIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllServiceIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServiceIds'
type MockDatabase_GetAllServiceIds_Call struct {
	*mock.Call
}

// GetAllServiceIds is a helper method to define mock.On call
//   - _a0 *entity.ServiceFilter
func (_e *MockDatabase_Expecter) GetAllServiceIds(_a0 interface{}) *MockDatabase_GetAllServiceIds_Call {
	return &MockDatabase_GetAllServiceIds_Call{Call: _e.mock.On("GetAllServiceIds", _a0)}
}

func (_c *MockDatabase_GetAllServiceIds_Call) Run(run func(_a0 *entity.ServiceFilter)) *MockDatabase_GetAllServiceIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllServiceIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllServiceIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllServiceIds_Call) RunAndReturn(run func(*entity.ServiceFilter) ([]int64, error)) *MockDatabase_GetAllServiceIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSupportGroupIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllSupportGroupIds(_a0 *entity.SupportGroupFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSupportGroupIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllSupportGroupIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSupportGroupIds'
type MockDatabase_GetAllSupportGroupIds_Call struct {
	*mock.Call
}

// GetAllSupportGroupIds is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
func (_e *MockDatabase_Expecter) GetAllSupportGroupIds(_a0 interface{}) *MockDatabase_GetAllSupportGroupIds_Call {
	return &MockDatabase_GetAllSupportGroupIds_Call{Call: _e.mock.On("GetAllSupportGroupIds", _a0)}
}

func (_c *MockDatabase_GetAllSupportGroupIds_Call) Run(run func(_a0 *entity.SupportGroupFilter)) *MockDatabase_GetAllSupportGroupIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllSupportGroupIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllSupportGroupIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllSupportGroupIds_Call) RunAndReturn(run func(*entity.SupportGroupFilter) ([]int64, error)) *MockDatabase_GetAllSupportGroupIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserIds provides a mock function with given fields: _a0
func (_m *MockDatabase) GetAllUserIds(_a0 *entity.UserFilter) ([]int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserIds")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) ([]int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) []int64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllUserIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserIds'
type MockDatabase_GetAllUserIds_Call struct {
	*mock.Call
}

// GetAllUserIds is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
func (_e *MockDatabase_Expecter) GetAllUserIds(_a0 interface{}) *MockDatabase_GetAllUserIds_Call {
	return &MockDatabase_GetAllUserIds_Call{Call: _e.mock.On("GetAllUserIds", _a0)}
}

func (_c *MockDatabase_GetAllUserIds_Call) Run(run func(_a0 *entity.UserFilter)) *MockDatabase_GetAllUserIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter))
	})
	return _c
}

func (_c *MockDatabase_GetAllUserIds_Call) Return(_a0 []int64, _a1 error) *MockDatabase_GetAllUserIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllUserIds_Call) RunAndReturn(run func(*entity.UserFilter) ([]int64, error)) *MockDatabase_GetAllUserIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentInstances provides a mock function with given fields: _a0
func (_m *MockDatabase) GetComponentInstances(_a0 *entity.ComponentInstanceFilter) ([]entity.ComponentInstance, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentInstances")
	}

	var r0 []entity.ComponentInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) ([]entity.ComponentInstance, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter) []entity.ComponentInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ComponentInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstanceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetComponentInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentInstances'
type MockDatabase_GetComponentInstances_Call struct {
	*mock.Call
}

// GetComponentInstances is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstanceFilter
func (_e *MockDatabase_Expecter) GetComponentInstances(_a0 interface{}) *MockDatabase_GetComponentInstances_Call {
	return &MockDatabase_GetComponentInstances_Call{Call: _e.mock.On("GetComponentInstances", _a0)}
}

func (_c *MockDatabase_GetComponentInstances_Call) Run(run func(_a0 *entity.ComponentInstanceFilter)) *MockDatabase_GetComponentInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstanceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetComponentInstances_Call) Return(_a0 []entity.ComponentInstance, _a1 error) *MockDatabase_GetComponentInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetComponentInstances_Call) RunAndReturn(run func(*entity.ComponentInstanceFilter) ([]entity.ComponentInstance, error)) *MockDatabase_GetComponentInstances_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentNames provides a mock function with given fields: filter
func (_m *MockDatabase) GetComponentNames(filter *entity.ComponentFilter) ([]string, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) ([]string, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetComponentNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentNames'
type MockDatabase_GetComponentNames_Call struct {
	*mock.Call
}

// GetComponentNames is a helper method to define mock.On call
//   - filter *entity.ComponentFilter
func (_e *MockDatabase_Expecter) GetComponentNames(filter interface{}) *MockDatabase_GetComponentNames_Call {
	return &MockDatabase_GetComponentNames_Call{Call: _e.mock.On("GetComponentNames", filter)}
}

func (_c *MockDatabase_GetComponentNames_Call) Run(run func(filter *entity.ComponentFilter)) *MockDatabase_GetComponentNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter))
	})
	return _c
}

func (_c *MockDatabase_GetComponentNames_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetComponentNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetComponentNames_Call) RunAndReturn(run func(*entity.ComponentFilter) ([]string, error)) *MockDatabase_GetComponentNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentVersions provides a mock function with given fields: _a0
func (_m *MockDatabase) GetComponentVersions(_a0 *entity.ComponentVersionFilter) ([]entity.ComponentVersion, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentVersions")
	}

	var r0 []entity.ComponentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) ([]entity.ComponentVersion, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter) []entity.ComponentVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ComponentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersionFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetComponentVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentVersions'
type MockDatabase_GetComponentVersions_Call struct {
	*mock.Call
}

// GetComponentVersions is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersionFilter
func (_e *MockDatabase_Expecter) GetComponentVersions(_a0 interface{}) *MockDatabase_GetComponentVersions_Call {
	return &MockDatabase_GetComponentVersions_Call{Call: _e.mock.On("GetComponentVersions", _a0)}
}

func (_c *MockDatabase_GetComponentVersions_Call) Run(run func(_a0 *entity.ComponentVersionFilter)) *MockDatabase_GetComponentVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersionFilter))
	})
	return _c
}

func (_c *MockDatabase_GetComponentVersions_Call) Return(_a0 []entity.ComponentVersion, _a1 error) *MockDatabase_GetComponentVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetComponentVersions_Call) RunAndReturn(run func(*entity.ComponentVersionFilter) ([]entity.ComponentVersion, error)) *MockDatabase_GetComponentVersions_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponents provides a mock function with given fields: _a0
func (_m *MockDatabase) GetComponents(_a0 *entity.ComponentFilter) ([]entity.Component, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetComponents")
	}

	var r0 []entity.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) ([]entity.Component, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter) []entity.Component); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponents'
type MockDatabase_GetComponents_Call struct {
	*mock.Call
}

// GetComponents is a helper method to define mock.On call
//   - _a0 *entity.ComponentFilter
func (_e *MockDatabase_Expecter) GetComponents(_a0 interface{}) *MockDatabase_GetComponents_Call {
	return &MockDatabase_GetComponents_Call{Call: _e.mock.On("GetComponents", _a0)}
}

func (_c *MockDatabase_GetComponents_Call) Run(run func(_a0 *entity.ComponentFilter)) *MockDatabase_GetComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter))
	})
	return _c
}

func (_c *MockDatabase_GetComponents_Call) Return(_a0 []entity.Component, _a1 error) *MockDatabase_GetComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetComponents_Call) RunAndReturn(run func(*entity.ComponentFilter) ([]entity.Component, error)) *MockDatabase_GetComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultIssuePriority provides a mock function with given fields:
func (_m *MockDatabase) GetDefaultIssuePriority() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultIssuePriority")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockDatabase_GetDefaultIssuePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultIssuePriority'
type MockDatabase_GetDefaultIssuePriority_Call struct {
	*mock.Call
}

// GetDefaultIssuePriority is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetDefaultIssuePriority() *MockDatabase_GetDefaultIssuePriority_Call {
	return &MockDatabase_GetDefaultIssuePriority_Call{Call: _e.mock.On("GetDefaultIssuePriority")}
}

func (_c *MockDatabase_GetDefaultIssuePriority_Call) Run(run func()) *MockDatabase_GetDefaultIssuePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetDefaultIssuePriority_Call) Return(_a0 int64) *MockDatabase_GetDefaultIssuePriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_GetDefaultIssuePriority_Call) RunAndReturn(run func() int64) *MockDatabase_GetDefaultIssuePriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvidences provides a mock function with given fields: _a0
func (_m *MockDatabase) GetEvidences(_a0 *entity.EvidenceFilter) ([]entity.Evidence, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEvidences")
	}

	var r0 []entity.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) ([]entity.Evidence, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter) []entity.Evidence); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.EvidenceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetEvidences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvidences'
type MockDatabase_GetEvidences_Call struct {
	*mock.Call
}

// GetEvidences is a helper method to define mock.On call
//   - _a0 *entity.EvidenceFilter
func (_e *MockDatabase_Expecter) GetEvidences(_a0 interface{}) *MockDatabase_GetEvidences_Call {
	return &MockDatabase_GetEvidences_Call{Call: _e.mock.On("GetEvidences", _a0)}
}

func (_c *MockDatabase_GetEvidences_Call) Run(run func(_a0 *entity.EvidenceFilter)) *MockDatabase_GetEvidences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.EvidenceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetEvidences_Call) Return(_a0 []entity.Evidence, _a1 error) *MockDatabase_GetEvidences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetEvidences_Call) RunAndReturn(run func(*entity.EvidenceFilter) ([]entity.Evidence, error)) *MockDatabase_GetEvidences_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueMatchChanges provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssueMatchChanges(_a0 *entity.IssueMatchChangeFilter) ([]entity.IssueMatchChange, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueMatchChanges")
	}

	var r0 []entity.IssueMatchChange
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) ([]entity.IssueMatchChange, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter) []entity.IssueMatchChange); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.IssueMatchChange)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChangeFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssueMatchChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueMatchChanges'
type MockDatabase_GetIssueMatchChanges_Call struct {
	*mock.Call
}

// GetIssueMatchChanges is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChangeFilter
func (_e *MockDatabase_Expecter) GetIssueMatchChanges(_a0 interface{}) *MockDatabase_GetIssueMatchChanges_Call {
	return &MockDatabase_GetIssueMatchChanges_Call{Call: _e.mock.On("GetIssueMatchChanges", _a0)}
}

func (_c *MockDatabase_GetIssueMatchChanges_Call) Run(run func(_a0 *entity.IssueMatchChangeFilter)) *MockDatabase_GetIssueMatchChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChangeFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssueMatchChanges_Call) Return(_a0 []entity.IssueMatchChange, _a1 error) *MockDatabase_GetIssueMatchChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssueMatchChanges_Call) RunAndReturn(run func(*entity.IssueMatchChangeFilter) ([]entity.IssueMatchChange, error)) *MockDatabase_GetIssueMatchChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueMatches provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssueMatches(_a0 *entity.IssueMatchFilter) ([]entity.IssueMatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueMatches")
	}

	var r0 []entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) ([]entity.IssueMatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter) []entity.IssueMatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssueMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueMatches'
type MockDatabase_GetIssueMatches_Call struct {
	*mock.Call
}

// GetIssueMatches is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchFilter
func (_e *MockDatabase_Expecter) GetIssueMatches(_a0 interface{}) *MockDatabase_GetIssueMatches_Call {
	return &MockDatabase_GetIssueMatches_Call{Call: _e.mock.On("GetIssueMatches", _a0)}
}

func (_c *MockDatabase_GetIssueMatches_Call) Run(run func(_a0 *entity.IssueMatchFilter)) *MockDatabase_GetIssueMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssueMatches_Call) Return(_a0 []entity.IssueMatch, _a1 error) *MockDatabase_GetIssueMatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssueMatches_Call) RunAndReturn(run func(*entity.IssueMatchFilter) ([]entity.IssueMatch, error)) *MockDatabase_GetIssueMatches_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueNames provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssueNames(_a0 *entity.IssueFilter) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssueNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueNames'
type MockDatabase_GetIssueNames_Call struct {
	*mock.Call
}

// GetIssueNames is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) GetIssueNames(_a0 interface{}) *MockDatabase_GetIssueNames_Call {
	return &MockDatabase_GetIssueNames_Call{Call: _e.mock.On("GetIssueNames", _a0)}
}

func (_c *MockDatabase_GetIssueNames_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_GetIssueNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssueNames_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetIssueNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssueNames_Call) RunAndReturn(run func(*entity.IssueFilter) ([]string, error)) *MockDatabase_GetIssueNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueRepositories provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssueRepositories(_a0 *entity.IssueRepositoryFilter) ([]entity.IssueRepository, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueRepositories")
	}

	var r0 []entity.IssueRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) ([]entity.IssueRepository, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter) []entity.IssueRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.IssueRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepositoryFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssueRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueRepositories'
type MockDatabase_GetIssueRepositories_Call struct {
	*mock.Call
}

// GetIssueRepositories is a helper method to define mock.On call
//   - _a0 *entity.IssueRepositoryFilter
func (_e *MockDatabase_Expecter) GetIssueRepositories(_a0 interface{}) *MockDatabase_GetIssueRepositories_Call {
	return &MockDatabase_GetIssueRepositories_Call{Call: _e.mock.On("GetIssueRepositories", _a0)}
}

func (_c *MockDatabase_GetIssueRepositories_Call) Run(run func(_a0 *entity.IssueRepositoryFilter)) *MockDatabase_GetIssueRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepositoryFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssueRepositories_Call) Return(_a0 []entity.IssueRepository, _a1 error) *MockDatabase_GetIssueRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssueRepositories_Call) RunAndReturn(run func(*entity.IssueRepositoryFilter) ([]entity.IssueRepository, error)) *MockDatabase_GetIssueRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueVariants provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssueVariants(_a0 *entity.IssueVariantFilter) ([]entity.IssueVariant, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueVariants")
	}

	var r0 []entity.IssueVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) ([]entity.IssueVariant, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter) []entity.IssueVariant); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.IssueVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariantFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssueVariants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueVariants'
type MockDatabase_GetIssueVariants_Call struct {
	*mock.Call
}

// GetIssueVariants is a helper method to define mock.On call
//   - _a0 *entity.IssueVariantFilter
func (_e *MockDatabase_Expecter) GetIssueVariants(_a0 interface{}) *MockDatabase_GetIssueVariants_Call {
	return &MockDatabase_GetIssueVariants_Call{Call: _e.mock.On("GetIssueVariants", _a0)}
}

func (_c *MockDatabase_GetIssueVariants_Call) Run(run func(_a0 *entity.IssueVariantFilter)) *MockDatabase_GetIssueVariants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariantFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssueVariants_Call) Return(_a0 []entity.IssueVariant, _a1 error) *MockDatabase_GetIssueVariants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssueVariants_Call) RunAndReturn(run func(*entity.IssueVariantFilter) ([]entity.IssueVariant, error)) *MockDatabase_GetIssueVariants_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssues provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssues(_a0 *entity.IssueFilter) ([]entity.Issue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssues")
	}

	var r0 []entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) ([]entity.Issue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) []entity.Issue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssues'
type MockDatabase_GetIssues_Call struct {
	*mock.Call
}

// GetIssues is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) GetIssues(_a0 interface{}) *MockDatabase_GetIssues_Call {
	return &MockDatabase_GetIssues_Call{Call: _e.mock.On("GetIssues", _a0)}
}

func (_c *MockDatabase_GetIssues_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_GetIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssues_Call) Return(_a0 []entity.Issue, _a1 error) *MockDatabase_GetIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssues_Call) RunAndReturn(run func(*entity.IssueFilter) ([]entity.Issue, error)) *MockDatabase_GetIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuesWithAggregations provides a mock function with given fields: _a0
func (_m *MockDatabase) GetIssuesWithAggregations(_a0 *entity.IssueFilter) ([]entity.IssueWithAggregations, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssuesWithAggregations")
	}

	var r0 []entity.IssueWithAggregations
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) ([]entity.IssueWithAggregations, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter) []entity.IssueWithAggregations); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.IssueWithAggregations)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetIssuesWithAggregations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuesWithAggregations'
type MockDatabase_GetIssuesWithAggregations_Call struct {
	*mock.Call
}

// GetIssuesWithAggregations is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
func (_e *MockDatabase_Expecter) GetIssuesWithAggregations(_a0 interface{}) *MockDatabase_GetIssuesWithAggregations_Call {
	return &MockDatabase_GetIssuesWithAggregations_Call{Call: _e.mock.On("GetIssuesWithAggregations", _a0)}
}

func (_c *MockDatabase_GetIssuesWithAggregations_Call) Run(run func(_a0 *entity.IssueFilter)) *MockDatabase_GetIssuesWithAggregations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter))
	})
	return _c
}

func (_c *MockDatabase_GetIssuesWithAggregations_Call) Return(_a0 []entity.IssueWithAggregations, _a1 error) *MockDatabase_GetIssuesWithAggregations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetIssuesWithAggregations_Call) RunAndReturn(run func(*entity.IssueFilter) ([]entity.IssueWithAggregations, error)) *MockDatabase_GetIssuesWithAggregations_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceNames provides a mock function with given fields: _a0
func (_m *MockDatabase) GetServiceNames(_a0 *entity.ServiceFilter) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceNames'
type MockDatabase_GetServiceNames_Call struct {
	*mock.Call
}

// GetServiceNames is a helper method to define mock.On call
//   - _a0 *entity.ServiceFilter
func (_e *MockDatabase_Expecter) GetServiceNames(_a0 interface{}) *MockDatabase_GetServiceNames_Call {
	return &MockDatabase_GetServiceNames_Call{Call: _e.mock.On("GetServiceNames", _a0)}
}

func (_c *MockDatabase_GetServiceNames_Call) Run(run func(_a0 *entity.ServiceFilter)) *MockDatabase_GetServiceNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetServiceNames_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetServiceNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceNames_Call) RunAndReturn(run func(*entity.ServiceFilter) ([]string, error)) *MockDatabase_GetServiceNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields: _a0
func (_m *MockDatabase) GetServices(_a0 *entity.ServiceFilter) ([]entity.Service, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) ([]entity.Service, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter) []entity.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type MockDatabase_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//   - _a0 *entity.ServiceFilter
func (_e *MockDatabase_Expecter) GetServices(_a0 interface{}) *MockDatabase_GetServices_Call {
	return &MockDatabase_GetServices_Call{Call: _e.mock.On("GetServices", _a0)}
}

func (_c *MockDatabase_GetServices_Call) Run(run func(_a0 *entity.ServiceFilter)) *MockDatabase_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter))
	})
	return _c
}

func (_c *MockDatabase_GetServices_Call) Return(_a0 []entity.Service, _a1 error) *MockDatabase_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServices_Call) RunAndReturn(run func(*entity.ServiceFilter) ([]entity.Service, error)) *MockDatabase_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportGroupNames provides a mock function with given fields: _a0
func (_m *MockDatabase) GetSupportGroupNames(_a0 *entity.SupportGroupFilter) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportGroupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSupportGroupNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportGroupNames'
type MockDatabase_GetSupportGroupNames_Call struct {
	*mock.Call
}

// GetSupportGroupNames is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
func (_e *MockDatabase_Expecter) GetSupportGroupNames(_a0 interface{}) *MockDatabase_GetSupportGroupNames_Call {
	return &MockDatabase_GetSupportGroupNames_Call{Call: _e.mock.On("GetSupportGroupNames", _a0)}
}

func (_c *MockDatabase_GetSupportGroupNames_Call) Run(run func(_a0 *entity.SupportGroupFilter)) *MockDatabase_GetSupportGroupNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter))
	})
	return _c
}

func (_c *MockDatabase_GetSupportGroupNames_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetSupportGroupNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSupportGroupNames_Call) RunAndReturn(run func(*entity.SupportGroupFilter) ([]string, error)) *MockDatabase_GetSupportGroupNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportGroups provides a mock function with given fields: _a0
func (_m *MockDatabase) GetSupportGroups(_a0 *entity.SupportGroupFilter) ([]entity.SupportGroup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportGroups")
	}

	var r0 []entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) ([]entity.SupportGroup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter) []entity.SupportGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSupportGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportGroups'
type MockDatabase_GetSupportGroups_Call struct {
	*mock.Call
}

// GetSupportGroups is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
func (_e *MockDatabase_Expecter) GetSupportGroups(_a0 interface{}) *MockDatabase_GetSupportGroups_Call {
	return &MockDatabase_GetSupportGroups_Call{Call: _e.mock.On("GetSupportGroups", _a0)}
}

func (_c *MockDatabase_GetSupportGroups_Call) Run(run func(_a0 *entity.SupportGroupFilter)) *MockDatabase_GetSupportGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter))
	})
	return _c
}

func (_c *MockDatabase_GetSupportGroups_Call) Return(_a0 []entity.SupportGroup, _a1 error) *MockDatabase_GetSupportGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSupportGroups_Call) RunAndReturn(run func(*entity.SupportGroupFilter) ([]entity.SupportGroup, error)) *MockDatabase_GetSupportGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueUserIDs provides a mock function with given fields: _a0
func (_m *MockDatabase) GetUniqueUserIDs(_a0 *entity.UserFilter) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueUserIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUniqueUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueUserIDs'
type MockDatabase_GetUniqueUserIDs_Call struct {
	*mock.Call
}

// GetUniqueUserIDs is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
func (_e *MockDatabase_Expecter) GetUniqueUserIDs(_a0 interface{}) *MockDatabase_GetUniqueUserIDs_Call {
	return &MockDatabase_GetUniqueUserIDs_Call{Call: _e.mock.On("GetUniqueUserIDs", _a0)}
}

func (_c *MockDatabase_GetUniqueUserIDs_Call) Run(run func(_a0 *entity.UserFilter)) *MockDatabase_GetUniqueUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter))
	})
	return _c
}

func (_c *MockDatabase_GetUniqueUserIDs_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetUniqueUserIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUniqueUserIDs_Call) RunAndReturn(run func(*entity.UserFilter) ([]string, error)) *MockDatabase_GetUniqueUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNames provides a mock function with given fields: _a0
func (_m *MockDatabase) GetUserNames(_a0 *entity.UserFilter) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNames'
type MockDatabase_GetUserNames_Call struct {
	*mock.Call
}

// GetUserNames is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
func (_e *MockDatabase_Expecter) GetUserNames(_a0 interface{}) *MockDatabase_GetUserNames_Call {
	return &MockDatabase_GetUserNames_Call{Call: _e.mock.On("GetUserNames", _a0)}
}

func (_c *MockDatabase_GetUserNames_Call) Run(run func(_a0 *entity.UserFilter)) *MockDatabase_GetUserNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter))
	})
	return _c
}

func (_c *MockDatabase_GetUserNames_Call) Return(_a0 []string, _a1 error) *MockDatabase_GetUserNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserNames_Call) RunAndReturn(run func(*entity.UserFilter) ([]string, error)) *MockDatabase_GetUserNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: _a0
func (_m *MockDatabase) GetUsers(_a0 *entity.UserFilter) ([]entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) ([]entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter) []entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockDatabase_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
func (_e *MockDatabase_Expecter) GetUsers(_a0 interface{}) *MockDatabase_GetUsers_Call {
	return &MockDatabase_GetUsers_Call{Call: _e.mock.On("GetUsers", _a0)}
}

func (_c *MockDatabase_GetUsers_Call) Run(run func(_a0 *entity.UserFilter)) *MockDatabase_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter))
	})
	return _c
}

func (_c *MockDatabase_GetUsers_Call) Return(_a0 []entity.User, _a1 error) *MockDatabase_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUsers_Call) RunAndReturn(run func(*entity.UserFilter) ([]entity.User, error)) *MockDatabase_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveComponentVersionFromIssue provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveComponentVersionFromIssue(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveComponentVersionFromIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveComponentVersionFromIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveComponentVersionFromIssue'
type MockDatabase_RemoveComponentVersionFromIssue_Call struct {
	*mock.Call
}

// RemoveComponentVersionFromIssue is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveComponentVersionFromIssue(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveComponentVersionFromIssue_Call {
	return &MockDatabase_RemoveComponentVersionFromIssue_Call{Call: _e.mock.On("RemoveComponentVersionFromIssue", _a0, _a1)}
}

func (_c *MockDatabase_RemoveComponentVersionFromIssue_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveComponentVersionFromIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveComponentVersionFromIssue_Call) Return(_a0 error) *MockDatabase_RemoveComponentVersionFromIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveComponentVersionFromIssue_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveComponentVersionFromIssue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEvidenceFromIssueMatch provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveEvidenceFromIssueMatch(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEvidenceFromIssueMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveEvidenceFromIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEvidenceFromIssueMatch'
type MockDatabase_RemoveEvidenceFromIssueMatch_Call struct {
	*mock.Call
}

// RemoveEvidenceFromIssueMatch is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveEvidenceFromIssueMatch(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveEvidenceFromIssueMatch_Call {
	return &MockDatabase_RemoveEvidenceFromIssueMatch_Call{Call: _e.mock.On("RemoveEvidenceFromIssueMatch", _a0, _a1)}
}

func (_c *MockDatabase_RemoveEvidenceFromIssueMatch_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveEvidenceFromIssueMatch_Call) Return(_a0 error) *MockDatabase_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveEvidenceFromIssueMatch_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIssueFromActivity provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveIssueFromActivity(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueFromActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveIssueFromActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIssueFromActivity'
type MockDatabase_RemoveIssueFromActivity_Call struct {
	*mock.Call
}

// RemoveIssueFromActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveIssueFromActivity(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveIssueFromActivity_Call {
	return &MockDatabase_RemoveIssueFromActivity_Call{Call: _e.mock.On("RemoveIssueFromActivity", _a0, _a1)}
}

func (_c *MockDatabase_RemoveIssueFromActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveIssueFromActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveIssueFromActivity_Call) Return(_a0 error) *MockDatabase_RemoveIssueFromActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveIssueFromActivity_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveIssueFromActivity_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIssueRepositoryFromService provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveIssueRepositoryFromService(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueRepositoryFromService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveIssueRepositoryFromService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIssueRepositoryFromService'
type MockDatabase_RemoveIssueRepositoryFromService_Call struct {
	*mock.Call
}

// RemoveIssueRepositoryFromService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveIssueRepositoryFromService(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveIssueRepositoryFromService_Call {
	return &MockDatabase_RemoveIssueRepositoryFromService_Call{Call: _e.mock.On("RemoveIssueRepositoryFromService", _a0, _a1)}
}

func (_c *MockDatabase_RemoveIssueRepositoryFromService_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveIssueRepositoryFromService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveIssueRepositoryFromService_Call) Return(_a0 error) *MockDatabase_RemoveIssueRepositoryFromService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveIssueRepositoryFromService_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveIssueRepositoryFromService_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOwnerFromService provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveOwnerFromService(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOwnerFromService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveOwnerFromService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwnerFromService'
type MockDatabase_RemoveOwnerFromService_Call struct {
	*mock.Call
}

// RemoveOwnerFromService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveOwnerFromService(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveOwnerFromService_Call {
	return &MockDatabase_RemoveOwnerFromService_Call{Call: _e.mock.On("RemoveOwnerFromService", _a0, _a1)}
}

func (_c *MockDatabase_RemoveOwnerFromService_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveOwnerFromService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveOwnerFromService_Call) Return(_a0 error) *MockDatabase_RemoveOwnerFromService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveOwnerFromService_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveOwnerFromService_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromActivity provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveServiceFromActivity(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveServiceFromActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromActivity'
type MockDatabase_RemoveServiceFromActivity_Call struct {
	*mock.Call
}

// RemoveServiceFromActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveServiceFromActivity(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveServiceFromActivity_Call {
	return &MockDatabase_RemoveServiceFromActivity_Call{Call: _e.mock.On("RemoveServiceFromActivity", _a0, _a1)}
}

func (_c *MockDatabase_RemoveServiceFromActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveServiceFromActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveServiceFromActivity_Call) Return(_a0 error) *MockDatabase_RemoveServiceFromActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveServiceFromActivity_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveServiceFromActivity_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveServiceFromSupportGroup(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveServiceFromSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromSupportGroup'
type MockDatabase_RemoveServiceFromSupportGroup_Call struct {
	*mock.Call
}

// RemoveServiceFromSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveServiceFromSupportGroup(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveServiceFromSupportGroup_Call {
	return &MockDatabase_RemoveServiceFromSupportGroup_Call{Call: _e.mock.On("RemoveServiceFromSupportGroup", _a0, _a1)}
}

func (_c *MockDatabase_RemoveServiceFromSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveServiceFromSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveServiceFromSupportGroup_Call) Return(_a0 error) *MockDatabase_RemoveServiceFromSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveServiceFromSupportGroup_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveServiceFromSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockDatabase) RemoveUserFromSupportGroup(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveUserFromSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromSupportGroup'
type MockDatabase_RemoveUserFromSupportGroup_Call struct {
	*mock.Call
}

// RemoveUserFromSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockDatabase_Expecter) RemoveUserFromSupportGroup(_a0 interface{}, _a1 interface{}) *MockDatabase_RemoveUserFromSupportGroup_Call {
	return &MockDatabase_RemoveUserFromSupportGroup_Call{Call: _e.mock.On("RemoveUserFromSupportGroup", _a0, _a1)}
}

func (_c *MockDatabase_RemoveUserFromSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockDatabase_RemoveUserFromSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabase_RemoveUserFromSupportGroup_Call) Return(_a0 error) *MockDatabase_RemoveUserFromSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveUserFromSupportGroup_Call) RunAndReturn(run func(int64, int64) error) *MockDatabase_RemoveUserFromSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActivity provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateActivity(_a0 *entity.Activity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Activity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActivity'
type MockDatabase_UpdateActivity_Call struct {
	*mock.Call
}

// UpdateActivity is a helper method to define mock.On call
//   - _a0 *entity.Activity
func (_e *MockDatabase_Expecter) UpdateActivity(_a0 interface{}) *MockDatabase_UpdateActivity_Call {
	return &MockDatabase_UpdateActivity_Call{Call: _e.mock.On("UpdateActivity", _a0)}
}

func (_c *MockDatabase_UpdateActivity_Call) Run(run func(_a0 *entity.Activity)) *MockDatabase_UpdateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Activity))
	})
	return _c
}

func (_c *MockDatabase_UpdateActivity_Call) Return(_a0 error) *MockDatabase_UpdateActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateActivity_Call) RunAndReturn(run func(*entity.Activity) error) *MockDatabase_UpdateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponent provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateComponent(_a0 *entity.Component) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Component) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponent'
type MockDatabase_UpdateComponent_Call struct {
	*mock.Call
}

// UpdateComponent is a helper method to define mock.On call
//   - _a0 *entity.Component
func (_e *MockDatabase_Expecter) UpdateComponent(_a0 interface{}) *MockDatabase_UpdateComponent_Call {
	return &MockDatabase_UpdateComponent_Call{Call: _e.mock.On("UpdateComponent", _a0)}
}

func (_c *MockDatabase_UpdateComponent_Call) Run(run func(_a0 *entity.Component)) *MockDatabase_UpdateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Component))
	})
	return _c
}

func (_c *MockDatabase_UpdateComponent_Call) Return(_a0 error) *MockDatabase_UpdateComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateComponent_Call) RunAndReturn(run func(*entity.Component) error) *MockDatabase_UpdateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentInstance provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateComponentInstance(_a0 *entity.ComponentInstance) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentInstance'
type MockDatabase_UpdateComponentInstance_Call struct {
	*mock.Call
}

// UpdateComponentInstance is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstance
func (_e *MockDatabase_Expecter) UpdateComponentInstance(_a0 interface{}) *MockDatabase_UpdateComponentInstance_Call {
	return &MockDatabase_UpdateComponentInstance_Call{Call: _e.mock.On("UpdateComponentInstance", _a0)}
}

func (_c *MockDatabase_UpdateComponentInstance_Call) Run(run func(_a0 *entity.ComponentInstance)) *MockDatabase_UpdateComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstance))
	})
	return _c
}

func (_c *MockDatabase_UpdateComponentInstance_Call) Return(_a0 error) *MockDatabase_UpdateComponentInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateComponentInstance_Call) RunAndReturn(run func(*entity.ComponentInstance) error) *MockDatabase_UpdateComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentVersion provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateComponentVersion(_a0 *entity.ComponentVersion) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentVersion'
type MockDatabase_UpdateComponentVersion_Call struct {
	*mock.Call
}

// UpdateComponentVersion is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersion
func (_e *MockDatabase_Expecter) UpdateComponentVersion(_a0 interface{}) *MockDatabase_UpdateComponentVersion_Call {
	return &MockDatabase_UpdateComponentVersion_Call{Call: _e.mock.On("UpdateComponentVersion", _a0)}
}

func (_c *MockDatabase_UpdateComponentVersion_Call) Run(run func(_a0 *entity.ComponentVersion)) *MockDatabase_UpdateComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersion))
	})
	return _c
}

func (_c *MockDatabase_UpdateComponentVersion_Call) Return(_a0 error) *MockDatabase_UpdateComponentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateComponentVersion_Call) RunAndReturn(run func(*entity.ComponentVersion) error) *MockDatabase_UpdateComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvidence provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateEvidence(_a0 *entity.Evidence) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvidence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Evidence) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvidence'
type MockDatabase_UpdateEvidence_Call struct {
	*mock.Call
}

// UpdateEvidence is a helper method to define mock.On call
//   - _a0 *entity.Evidence
func (_e *MockDatabase_Expecter) UpdateEvidence(_a0 interface{}) *MockDatabase_UpdateEvidence_Call {
	return &MockDatabase_UpdateEvidence_Call{Call: _e.mock.On("UpdateEvidence", _a0)}
}

func (_c *MockDatabase_UpdateEvidence_Call) Run(run func(_a0 *entity.Evidence)) *MockDatabase_UpdateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Evidence))
	})
	return _c
}

func (_c *MockDatabase_UpdateEvidence_Call) Return(_a0 error) *MockDatabase_UpdateEvidence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateEvidence_Call) RunAndReturn(run func(*entity.Evidence) error) *MockDatabase_UpdateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssue provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateIssue(_a0 *entity.Issue) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Issue) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssue'
type MockDatabase_UpdateIssue_Call struct {
	*mock.Call
}

// UpdateIssue is a helper method to define mock.On call
//   - _a0 *entity.Issue
func (_e *MockDatabase_Expecter) UpdateIssue(_a0 interface{}) *MockDatabase_UpdateIssue_Call {
	return &MockDatabase_UpdateIssue_Call{Call: _e.mock.On("UpdateIssue", _a0)}
}

func (_c *MockDatabase_UpdateIssue_Call) Run(run func(_a0 *entity.Issue)) *MockDatabase_UpdateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Issue))
	})
	return _c
}

func (_c *MockDatabase_UpdateIssue_Call) Return(_a0 error) *MockDatabase_UpdateIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateIssue_Call) RunAndReturn(run func(*entity.Issue) error) *MockDatabase_UpdateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueMatch provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateIssueMatch(_a0 *entity.IssueMatch) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueMatch'
type MockDatabase_UpdateIssueMatch_Call struct {
	*mock.Call
}

// UpdateIssueMatch is a helper method to define mock.On call
//   - _a0 *entity.IssueMatch
func (_e *MockDatabase_Expecter) UpdateIssueMatch(_a0 interface{}) *MockDatabase_UpdateIssueMatch_Call {
	return &MockDatabase_UpdateIssueMatch_Call{Call: _e.mock.On("UpdateIssueMatch", _a0)}
}

func (_c *MockDatabase_UpdateIssueMatch_Call) Run(run func(_a0 *entity.IssueMatch)) *MockDatabase_UpdateIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatch))
	})
	return _c
}

func (_c *MockDatabase_UpdateIssueMatch_Call) Return(_a0 error) *MockDatabase_UpdateIssueMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateIssueMatch_Call) RunAndReturn(run func(*entity.IssueMatch) error) *MockDatabase_UpdateIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateIssueMatchChange(_a0 *entity.IssueMatchChange) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueMatchChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueMatchChange'
type MockDatabase_UpdateIssueMatchChange_Call struct {
	*mock.Call
}

// UpdateIssueMatchChange is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChange
func (_e *MockDatabase_Expecter) UpdateIssueMatchChange(_a0 interface{}) *MockDatabase_UpdateIssueMatchChange_Call {
	return &MockDatabase_UpdateIssueMatchChange_Call{Call: _e.mock.On("UpdateIssueMatchChange", _a0)}
}

func (_c *MockDatabase_UpdateIssueMatchChange_Call) Run(run func(_a0 *entity.IssueMatchChange)) *MockDatabase_UpdateIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChange))
	})
	return _c
}

func (_c *MockDatabase_UpdateIssueMatchChange_Call) Return(_a0 error) *MockDatabase_UpdateIssueMatchChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateIssueMatchChange_Call) RunAndReturn(run func(*entity.IssueMatchChange) error) *MockDatabase_UpdateIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueRepository provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateIssueRepository(_a0 *entity.IssueRepository) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueRepository'
type MockDatabase_UpdateIssueRepository_Call struct {
	*mock.Call
}

// UpdateIssueRepository is a helper method to define mock.On call
//   - _a0 *entity.IssueRepository
func (_e *MockDatabase_Expecter) UpdateIssueRepository(_a0 interface{}) *MockDatabase_UpdateIssueRepository_Call {
	return &MockDatabase_UpdateIssueRepository_Call{Call: _e.mock.On("UpdateIssueRepository", _a0)}
}

func (_c *MockDatabase_UpdateIssueRepository_Call) Run(run func(_a0 *entity.IssueRepository)) *MockDatabase_UpdateIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepository))
	})
	return _c
}

func (_c *MockDatabase_UpdateIssueRepository_Call) Return(_a0 error) *MockDatabase_UpdateIssueRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateIssueRepository_Call) RunAndReturn(run func(*entity.IssueRepository) error) *MockDatabase_UpdateIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueVariant provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateIssueVariant(_a0 *entity.IssueVariant) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueVariant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueVariant'
type MockDatabase_UpdateIssueVariant_Call struct {
	*mock.Call
}

// UpdateIssueVariant is a helper method to define mock.On call
//   - _a0 *entity.IssueVariant
func (_e *MockDatabase_Expecter) UpdateIssueVariant(_a0 interface{}) *MockDatabase_UpdateIssueVariant_Call {
	return &MockDatabase_UpdateIssueVariant_Call{Call: _e.mock.On("UpdateIssueVariant", _a0)}
}

func (_c *MockDatabase_UpdateIssueVariant_Call) Run(run func(_a0 *entity.IssueVariant)) *MockDatabase_UpdateIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariant))
	})
	return _c
}

func (_c *MockDatabase_UpdateIssueVariant_Call) Return(_a0 error) *MockDatabase_UpdateIssueVariant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateIssueVariant_Call) RunAndReturn(run func(*entity.IssueVariant) error) *MockDatabase_UpdateIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateService(_a0 *entity.Service) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockDatabase_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - _a0 *entity.Service
func (_e *MockDatabase_Expecter) UpdateService(_a0 interface{}) *MockDatabase_UpdateService_Call {
	return &MockDatabase_UpdateService_Call{Call: _e.mock.On("UpdateService", _a0)}
}

func (_c *MockDatabase_UpdateService_Call) Run(run func(_a0 *entity.Service)) *MockDatabase_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Service))
	})
	return _c
}

func (_c *MockDatabase_UpdateService_Call) Return(_a0 error) *MockDatabase_UpdateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateService_Call) RunAndReturn(run func(*entity.Service) error) *MockDatabase_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSupportGroup provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateSupportGroup(_a0 *entity.SupportGroup) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSupportGroup'
type MockDatabase_UpdateSupportGroup_Call struct {
	*mock.Call
}

// UpdateSupportGroup is a helper method to define mock.On call
//   - _a0 *entity.SupportGroup
func (_e *MockDatabase_Expecter) UpdateSupportGroup(_a0 interface{}) *MockDatabase_UpdateSupportGroup_Call {
	return &MockDatabase_UpdateSupportGroup_Call{Call: _e.mock.On("UpdateSupportGroup", _a0)}
}

func (_c *MockDatabase_UpdateSupportGroup_Call) Run(run func(_a0 *entity.SupportGroup)) *MockDatabase_UpdateSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroup))
	})
	return _c
}

func (_c *MockDatabase_UpdateSupportGroup_Call) Return(_a0 error) *MockDatabase_UpdateSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateSupportGroup_Call) RunAndReturn(run func(*entity.SupportGroup) error) *MockDatabase_UpdateSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockDatabase) UpdateUser(_a0 *entity.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockDatabase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockDatabase_Expecter) UpdateUser(_a0 interface{}) *MockDatabase_UpdateUser_Call {
	return &MockDatabase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0)}
}

func (_c *MockDatabase_UpdateUser_Call) Run(run func(_a0 *entity.User)) *MockDatabase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) Return(_a0 error) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) RunAndReturn(run func(*entity.User) error) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
