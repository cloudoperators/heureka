// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/cloudoperators/heureka/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockHeureka is an autogenerated mock type for the Heureka type
type MockHeureka struct {
	mock.Mock
}

type MockHeureka_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeureka) EXPECT() *MockHeureka_Expecter {
	return &MockHeureka_Expecter{mock: &_m.Mock}
}

// AddComponentVersionToIssue provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddComponentVersionToIssue(_a0 int64, _a1 int64) (*entity.Issue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddComponentVersionToIssue")
	}

	var r0 *entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Issue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Issue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddComponentVersionToIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComponentVersionToIssue'
type MockHeureka_AddComponentVersionToIssue_Call struct {
	*mock.Call
}

// AddComponentVersionToIssue is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddComponentVersionToIssue(_a0 interface{}, _a1 interface{}) *MockHeureka_AddComponentVersionToIssue_Call {
	return &MockHeureka_AddComponentVersionToIssue_Call{Call: _e.mock.On("AddComponentVersionToIssue", _a0, _a1)}
}

func (_c *MockHeureka_AddComponentVersionToIssue_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddComponentVersionToIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddComponentVersionToIssue_Call) Return(_a0 *entity.Issue, _a1 error) *MockHeureka_AddComponentVersionToIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddComponentVersionToIssue_Call) RunAndReturn(run func(int64, int64) (*entity.Issue, error)) *MockHeureka_AddComponentVersionToIssue_Call {
	_c.Call.Return(run)
	return _c
}

// AddEvidenceToIssueMatch provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddEvidenceToIssueMatch(_a0 int64, _a1 int64) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddEvidenceToIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.IssueMatch, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.IssueMatch); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddEvidenceToIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvidenceToIssueMatch'
type MockHeureka_AddEvidenceToIssueMatch_Call struct {
	*mock.Call
}

// AddEvidenceToIssueMatch is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddEvidenceToIssueMatch(_a0 interface{}, _a1 interface{}) *MockHeureka_AddEvidenceToIssueMatch_Call {
	return &MockHeureka_AddEvidenceToIssueMatch_Call{Call: _e.mock.On("AddEvidenceToIssueMatch", _a0, _a1)}
}

func (_c *MockHeureka_AddEvidenceToIssueMatch_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddEvidenceToIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddEvidenceToIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockHeureka_AddEvidenceToIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddEvidenceToIssueMatch_Call) RunAndReturn(run func(int64, int64) (*entity.IssueMatch, error)) *MockHeureka_AddEvidenceToIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddIssueRepositoryToService provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockHeureka) AddIssueRepositoryToService(_a0 int64, _a1 int64, _a2 int64) (*entity.Service, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueRepositoryToService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) (*entity.Service, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int64) *entity.Service); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddIssueRepositoryToService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIssueRepositoryToService'
type MockHeureka_AddIssueRepositoryToService_Call struct {
	*mock.Call
}

// AddIssueRepositoryToService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
//   - _a2 int64
func (_e *MockHeureka_Expecter) AddIssueRepositoryToService(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockHeureka_AddIssueRepositoryToService_Call {
	return &MockHeureka_AddIssueRepositoryToService_Call{Call: _e.mock.On("AddIssueRepositoryToService", _a0, _a1, _a2)}
}

func (_c *MockHeureka_AddIssueRepositoryToService_Call) Run(run func(_a0 int64, _a1 int64, _a2 int64)) *MockHeureka_AddIssueRepositoryToService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddIssueRepositoryToService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_AddIssueRepositoryToService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddIssueRepositoryToService_Call) RunAndReturn(run func(int64, int64, int64) (*entity.Service, error)) *MockHeureka_AddIssueRepositoryToService_Call {
	_c.Call.Return(run)
	return _c
}

// AddIssueToActivity provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddIssueToActivity(_a0 int64, _a1 int64) (*entity.Activity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueToActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Activity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Activity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddIssueToActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIssueToActivity'
type MockHeureka_AddIssueToActivity_Call struct {
	*mock.Call
}

// AddIssueToActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddIssueToActivity(_a0 interface{}, _a1 interface{}) *MockHeureka_AddIssueToActivity_Call {
	return &MockHeureka_AddIssueToActivity_Call{Call: _e.mock.On("AddIssueToActivity", _a0, _a1)}
}

func (_c *MockHeureka_AddIssueToActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddIssueToActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddIssueToActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_AddIssueToActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddIssueToActivity_Call) RunAndReturn(run func(int64, int64) (*entity.Activity, error)) *MockHeureka_AddIssueToActivity_Call {
	_c.Call.Return(run)
	return _c
}

// AddOwnerToService provides a mock function with given fields: serviceId, ownerId
func (_m *MockHeureka) AddOwnerToService(serviceId int64, ownerId int64) (*entity.Service, error) {
	ret := _m.Called(serviceId, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for AddOwnerToService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Service, error)); ok {
		return rf(serviceId, ownerId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Service); ok {
		r0 = rf(serviceId, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(serviceId, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddOwnerToService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwnerToService'
type MockHeureka_AddOwnerToService_Call struct {
	*mock.Call
}

// AddOwnerToService is a helper method to define mock.On call
//   - serviceId int64
//   - ownerId int64
func (_e *MockHeureka_Expecter) AddOwnerToService(serviceId interface{}, ownerId interface{}) *MockHeureka_AddOwnerToService_Call {
	return &MockHeureka_AddOwnerToService_Call{Call: _e.mock.On("AddOwnerToService", serviceId, ownerId)}
}

func (_c *MockHeureka_AddOwnerToService_Call) Run(run func(serviceId int64, ownerId int64)) *MockHeureka_AddOwnerToService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddOwnerToService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_AddOwnerToService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddOwnerToService_Call) RunAndReturn(run func(int64, int64) (*entity.Service, error)) *MockHeureka_AddOwnerToService_Call {
	_c.Call.Return(run)
	return _c
}

// AddServiceToActivity provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddServiceToActivity(_a0 int64, _a1 int64) (*entity.Activity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceToActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Activity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Activity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddServiceToActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceToActivity'
type MockHeureka_AddServiceToActivity_Call struct {
	*mock.Call
}

// AddServiceToActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddServiceToActivity(_a0 interface{}, _a1 interface{}) *MockHeureka_AddServiceToActivity_Call {
	return &MockHeureka_AddServiceToActivity_Call{Call: _e.mock.On("AddServiceToActivity", _a0, _a1)}
}

func (_c *MockHeureka_AddServiceToActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddServiceToActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddServiceToActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_AddServiceToActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddServiceToActivity_Call) RunAndReturn(run func(int64, int64) (*entity.Activity, error)) *MockHeureka_AddServiceToActivity_Call {
	_c.Call.Return(run)
	return _c
}

// AddServiceToSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddServiceToSupportGroup(_a0 int64, _a1 int64) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceToSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.SupportGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.SupportGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddServiceToSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceToSupportGroup'
type MockHeureka_AddServiceToSupportGroup_Call struct {
	*mock.Call
}

// AddServiceToSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddServiceToSupportGroup(_a0 interface{}, _a1 interface{}) *MockHeureka_AddServiceToSupportGroup_Call {
	return &MockHeureka_AddServiceToSupportGroup_Call{Call: _e.mock.On("AddServiceToSupportGroup", _a0, _a1)}
}

func (_c *MockHeureka_AddServiceToSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddServiceToSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddServiceToSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_AddServiceToSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddServiceToSupportGroup_Call) RunAndReturn(run func(int64, int64) (*entity.SupportGroup, error)) *MockHeureka_AddServiceToSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) AddUserToSupportGroup(_a0 int64, _a1 int64) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.SupportGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.SupportGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_AddUserToSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToSupportGroup'
type MockHeureka_AddUserToSupportGroup_Call struct {
	*mock.Call
}

// AddUserToSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) AddUserToSupportGroup(_a0 interface{}, _a1 interface{}) *MockHeureka_AddUserToSupportGroup_Call {
	return &MockHeureka_AddUserToSupportGroup_Call{Call: _e.mock.On("AddUserToSupportGroup", _a0, _a1)}
}

func (_c *MockHeureka_AddUserToSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_AddUserToSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_AddUserToSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_AddUserToSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_AddUserToSupportGroup_Call) RunAndReturn(run func(int64, int64) (*entity.SupportGroup, error)) *MockHeureka_AddUserToSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateActivity provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateActivity(_a0 *entity.Activity) (*entity.Activity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Activity) (*entity.Activity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Activity) *entity.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Activity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateActivity'
type MockHeureka_CreateActivity_Call struct {
	*mock.Call
}

// CreateActivity is a helper method to define mock.On call
//   - _a0 *entity.Activity
func (_e *MockHeureka_Expecter) CreateActivity(_a0 interface{}) *MockHeureka_CreateActivity_Call {
	return &MockHeureka_CreateActivity_Call{Call: _e.mock.On("CreateActivity", _a0)}
}

func (_c *MockHeureka_CreateActivity_Call) Run(run func(_a0 *entity.Activity)) *MockHeureka_CreateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Activity))
	})
	return _c
}

func (_c *MockHeureka_CreateActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_CreateActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateActivity_Call) RunAndReturn(run func(*entity.Activity) (*entity.Activity, error)) *MockHeureka_CreateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponent provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateComponent(_a0 *entity.Component) (*entity.Component, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 *entity.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Component) (*entity.Component, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Component) *entity.Component); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Component) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponent'
type MockHeureka_CreateComponent_Call struct {
	*mock.Call
}

// CreateComponent is a helper method to define mock.On call
//   - _a0 *entity.Component
func (_e *MockHeureka_Expecter) CreateComponent(_a0 interface{}) *MockHeureka_CreateComponent_Call {
	return &MockHeureka_CreateComponent_Call{Call: _e.mock.On("CreateComponent", _a0)}
}

func (_c *MockHeureka_CreateComponent_Call) Run(run func(_a0 *entity.Component)) *MockHeureka_CreateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Component))
	})
	return _c
}

func (_c *MockHeureka_CreateComponent_Call) Return(_a0 *entity.Component, _a1 error) *MockHeureka_CreateComponent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateComponent_Call) RunAndReturn(run func(*entity.Component) (*entity.Component, error)) *MockHeureka_CreateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentInstance provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateComponentInstance(_a0 *entity.ComponentInstance) (*entity.ComponentInstance, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentInstance")
	}

	var r0 *entity.ComponentInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) (*entity.ComponentInstance, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) *entity.ComponentInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentInstance'
type MockHeureka_CreateComponentInstance_Call struct {
	*mock.Call
}

// CreateComponentInstance is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstance
func (_e *MockHeureka_Expecter) CreateComponentInstance(_a0 interface{}) *MockHeureka_CreateComponentInstance_Call {
	return &MockHeureka_CreateComponentInstance_Call{Call: _e.mock.On("CreateComponentInstance", _a0)}
}

func (_c *MockHeureka_CreateComponentInstance_Call) Run(run func(_a0 *entity.ComponentInstance)) *MockHeureka_CreateComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstance))
	})
	return _c
}

func (_c *MockHeureka_CreateComponentInstance_Call) Return(_a0 *entity.ComponentInstance, _a1 error) *MockHeureka_CreateComponentInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateComponentInstance_Call) RunAndReturn(run func(*entity.ComponentInstance) (*entity.ComponentInstance, error)) *MockHeureka_CreateComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentVersion provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateComponentVersion(_a0 *entity.ComponentVersion) (*entity.ComponentVersion, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentVersion")
	}

	var r0 *entity.ComponentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) (*entity.ComponentVersion, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) *entity.ComponentVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersion) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentVersion'
type MockHeureka_CreateComponentVersion_Call struct {
	*mock.Call
}

// CreateComponentVersion is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersion
func (_e *MockHeureka_Expecter) CreateComponentVersion(_a0 interface{}) *MockHeureka_CreateComponentVersion_Call {
	return &MockHeureka_CreateComponentVersion_Call{Call: _e.mock.On("CreateComponentVersion", _a0)}
}

func (_c *MockHeureka_CreateComponentVersion_Call) Run(run func(_a0 *entity.ComponentVersion)) *MockHeureka_CreateComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersion))
	})
	return _c
}

func (_c *MockHeureka_CreateComponentVersion_Call) Return(_a0 *entity.ComponentVersion, _a1 error) *MockHeureka_CreateComponentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateComponentVersion_Call) RunAndReturn(run func(*entity.ComponentVersion) (*entity.ComponentVersion, error)) *MockHeureka_CreateComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvidence provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateEvidence(_a0 *entity.Evidence) (*entity.Evidence, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvidence")
	}

	var r0 *entity.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Evidence) (*entity.Evidence, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Evidence) *entity.Evidence); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Evidence) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvidence'
type MockHeureka_CreateEvidence_Call struct {
	*mock.Call
}

// CreateEvidence is a helper method to define mock.On call
//   - _a0 *entity.Evidence
func (_e *MockHeureka_Expecter) CreateEvidence(_a0 interface{}) *MockHeureka_CreateEvidence_Call {
	return &MockHeureka_CreateEvidence_Call{Call: _e.mock.On("CreateEvidence", _a0)}
}

func (_c *MockHeureka_CreateEvidence_Call) Run(run func(_a0 *entity.Evidence)) *MockHeureka_CreateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Evidence))
	})
	return _c
}

func (_c *MockHeureka_CreateEvidence_Call) Return(_a0 *entity.Evidence, _a1 error) *MockHeureka_CreateEvidence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateEvidence_Call) RunAndReturn(run func(*entity.Evidence) (*entity.Evidence, error)) *MockHeureka_CreateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssue provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateIssue(_a0 *entity.Issue) (*entity.Issue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Issue) (*entity.Issue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Issue) *entity.Issue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Issue) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type MockHeureka_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - _a0 *entity.Issue
func (_e *MockHeureka_Expecter) CreateIssue(_a0 interface{}) *MockHeureka_CreateIssue_Call {
	return &MockHeureka_CreateIssue_Call{Call: _e.mock.On("CreateIssue", _a0)}
}

func (_c *MockHeureka_CreateIssue_Call) Run(run func(_a0 *entity.Issue)) *MockHeureka_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Issue))
	})
	return _c
}

func (_c *MockHeureka_CreateIssue_Call) Return(_a0 *entity.Issue, _a1 error) *MockHeureka_CreateIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateIssue_Call) RunAndReturn(run func(*entity.Issue) (*entity.Issue, error)) *MockHeureka_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueMatch provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateIssueMatch(_a0 *entity.IssueMatch) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) (*entity.IssueMatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) *entity.IssueMatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatch) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueMatch'
type MockHeureka_CreateIssueMatch_Call struct {
	*mock.Call
}

// CreateIssueMatch is a helper method to define mock.On call
//   - _a0 *entity.IssueMatch
func (_e *MockHeureka_Expecter) CreateIssueMatch(_a0 interface{}) *MockHeureka_CreateIssueMatch_Call {
	return &MockHeureka_CreateIssueMatch_Call{Call: _e.mock.On("CreateIssueMatch", _a0)}
}

func (_c *MockHeureka_CreateIssueMatch_Call) Run(run func(_a0 *entity.IssueMatch)) *MockHeureka_CreateIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatch))
	})
	return _c
}

func (_c *MockHeureka_CreateIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockHeureka_CreateIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateIssueMatch_Call) RunAndReturn(run func(*entity.IssueMatch) (*entity.IssueMatch, error)) *MockHeureka_CreateIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateIssueMatchChange(_a0 *entity.IssueMatchChange) (*entity.IssueMatchChange, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueMatchChange")
	}

	var r0 *entity.IssueMatchChange
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) *entity.IssueMatchChange); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatchChange)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChange) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueMatchChange'
type MockHeureka_CreateIssueMatchChange_Call struct {
	*mock.Call
}

// CreateIssueMatchChange is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChange
func (_e *MockHeureka_Expecter) CreateIssueMatchChange(_a0 interface{}) *MockHeureka_CreateIssueMatchChange_Call {
	return &MockHeureka_CreateIssueMatchChange_Call{Call: _e.mock.On("CreateIssueMatchChange", _a0)}
}

func (_c *MockHeureka_CreateIssueMatchChange_Call) Run(run func(_a0 *entity.IssueMatchChange)) *MockHeureka_CreateIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChange))
	})
	return _c
}

func (_c *MockHeureka_CreateIssueMatchChange_Call) Return(_a0 *entity.IssueMatchChange, _a1 error) *MockHeureka_CreateIssueMatchChange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateIssueMatchChange_Call) RunAndReturn(run func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)) *MockHeureka_CreateIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueRepository provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateIssueRepository(_a0 *entity.IssueRepository) (*entity.IssueRepository, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueRepository")
	}

	var r0 *entity.IssueRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) (*entity.IssueRepository, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) *entity.IssueRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepository) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueRepository'
type MockHeureka_CreateIssueRepository_Call struct {
	*mock.Call
}

// CreateIssueRepository is a helper method to define mock.On call
//   - _a0 *entity.IssueRepository
func (_e *MockHeureka_Expecter) CreateIssueRepository(_a0 interface{}) *MockHeureka_CreateIssueRepository_Call {
	return &MockHeureka_CreateIssueRepository_Call{Call: _e.mock.On("CreateIssueRepository", _a0)}
}

func (_c *MockHeureka_CreateIssueRepository_Call) Run(run func(_a0 *entity.IssueRepository)) *MockHeureka_CreateIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepository))
	})
	return _c
}

func (_c *MockHeureka_CreateIssueRepository_Call) Return(_a0 *entity.IssueRepository, _a1 error) *MockHeureka_CreateIssueRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateIssueRepository_Call) RunAndReturn(run func(*entity.IssueRepository) (*entity.IssueRepository, error)) *MockHeureka_CreateIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueVariant provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateIssueVariant(_a0 *entity.IssueVariant) (*entity.IssueVariant, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueVariant")
	}

	var r0 *entity.IssueVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) (*entity.IssueVariant, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) *entity.IssueVariant); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariant) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueVariant'
type MockHeureka_CreateIssueVariant_Call struct {
	*mock.Call
}

// CreateIssueVariant is a helper method to define mock.On call
//   - _a0 *entity.IssueVariant
func (_e *MockHeureka_Expecter) CreateIssueVariant(_a0 interface{}) *MockHeureka_CreateIssueVariant_Call {
	return &MockHeureka_CreateIssueVariant_Call{Call: _e.mock.On("CreateIssueVariant", _a0)}
}

func (_c *MockHeureka_CreateIssueVariant_Call) Run(run func(_a0 *entity.IssueVariant)) *MockHeureka_CreateIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariant))
	})
	return _c
}

func (_c *MockHeureka_CreateIssueVariant_Call) Return(_a0 *entity.IssueVariant, _a1 error) *MockHeureka_CreateIssueVariant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateIssueVariant_Call) RunAndReturn(run func(*entity.IssueVariant) (*entity.IssueVariant, error)) *MockHeureka_CreateIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: service
func (_m *MockHeureka) CreateService(service *entity.Service) (*entity.Service, error) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Service) (*entity.Service, error)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(*entity.Service) *entity.Service); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Service) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockHeureka_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - service *entity.Service
func (_e *MockHeureka_Expecter) CreateService(service interface{}) *MockHeureka_CreateService_Call {
	return &MockHeureka_CreateService_Call{Call: _e.mock.On("CreateService", service)}
}

func (_c *MockHeureka_CreateService_Call) Run(run func(service *entity.Service)) *MockHeureka_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Service))
	})
	return _c
}

func (_c *MockHeureka_CreateService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateService_Call) RunAndReturn(run func(*entity.Service) (*entity.Service, error)) *MockHeureka_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSupportGroup provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateSupportGroup(_a0 *entity.SupportGroup) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) (*entity.SupportGroup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) *entity.SupportGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroup) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSupportGroup'
type MockHeureka_CreateSupportGroup_Call struct {
	*mock.Call
}

// CreateSupportGroup is a helper method to define mock.On call
//   - _a0 *entity.SupportGroup
func (_e *MockHeureka_Expecter) CreateSupportGroup(_a0 interface{}) *MockHeureka_CreateSupportGroup_Call {
	return &MockHeureka_CreateSupportGroup_Call{Call: _e.mock.On("CreateSupportGroup", _a0)}
}

func (_c *MockHeureka_CreateSupportGroup_Call) Run(run func(_a0 *entity.SupportGroup)) *MockHeureka_CreateSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroup))
	})
	return _c
}

func (_c *MockHeureka_CreateSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_CreateSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateSupportGroup_Call) RunAndReturn(run func(*entity.SupportGroup) (*entity.SupportGroup, error)) *MockHeureka_CreateSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockHeureka) CreateUser(_a0 *entity.User) (*entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.User) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockHeureka_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockHeureka_Expecter) CreateUser(_a0 interface{}) *MockHeureka_CreateUser_Call {
	return &MockHeureka_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockHeureka_CreateUser_Call) Run(run func(_a0 *entity.User)) *MockHeureka_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockHeureka_CreateUser_Call) Return(_a0 *entity.User, _a1 error) *MockHeureka_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_CreateUser_Call) RunAndReturn(run func(*entity.User) (*entity.User, error)) *MockHeureka_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteActivity provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteActivity(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteActivity'
type MockHeureka_DeleteActivity_Call struct {
	*mock.Call
}

// DeleteActivity is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteActivity(_a0 interface{}) *MockHeureka_DeleteActivity_Call {
	return &MockHeureka_DeleteActivity_Call{Call: _e.mock.On("DeleteActivity", _a0)}
}

func (_c *MockHeureka_DeleteActivity_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteActivity_Call) Return(_a0 error) *MockHeureka_DeleteActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteActivity_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteActivity_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponent provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteComponent(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponent'
type MockHeureka_DeleteComponent_Call struct {
	*mock.Call
}

// DeleteComponent is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteComponent(_a0 interface{}) *MockHeureka_DeleteComponent_Call {
	return &MockHeureka_DeleteComponent_Call{Call: _e.mock.On("DeleteComponent", _a0)}
}

func (_c *MockHeureka_DeleteComponent_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteComponent_Call) Return(_a0 error) *MockHeureka_DeleteComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteComponent_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteComponent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentInstance provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteComponentInstance(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentInstance'
type MockHeureka_DeleteComponentInstance_Call struct {
	*mock.Call
}

// DeleteComponentInstance is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteComponentInstance(_a0 interface{}) *MockHeureka_DeleteComponentInstance_Call {
	return &MockHeureka_DeleteComponentInstance_Call{Call: _e.mock.On("DeleteComponentInstance", _a0)}
}

func (_c *MockHeureka_DeleteComponentInstance_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteComponentInstance_Call) Return(_a0 error) *MockHeureka_DeleteComponentInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteComponentInstance_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentVersion provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteComponentVersion(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentVersion'
type MockHeureka_DeleteComponentVersion_Call struct {
	*mock.Call
}

// DeleteComponentVersion is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteComponentVersion(_a0 interface{}) *MockHeureka_DeleteComponentVersion_Call {
	return &MockHeureka_DeleteComponentVersion_Call{Call: _e.mock.On("DeleteComponentVersion", _a0)}
}

func (_c *MockHeureka_DeleteComponentVersion_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteComponentVersion_Call) Return(_a0 error) *MockHeureka_DeleteComponentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteComponentVersion_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvidence provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteEvidence(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvidence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvidence'
type MockHeureka_DeleteEvidence_Call struct {
	*mock.Call
}

// DeleteEvidence is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteEvidence(_a0 interface{}) *MockHeureka_DeleteEvidence_Call {
	return &MockHeureka_DeleteEvidence_Call{Call: _e.mock.On("DeleteEvidence", _a0)}
}

func (_c *MockHeureka_DeleteEvidence_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteEvidence_Call) Return(_a0 error) *MockHeureka_DeleteEvidence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteEvidence_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssue provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteIssue(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssue'
type MockHeureka_DeleteIssue_Call struct {
	*mock.Call
}

// DeleteIssue is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteIssue(_a0 interface{}) *MockHeureka_DeleteIssue_Call {
	return &MockHeureka_DeleteIssue_Call{Call: _e.mock.On("DeleteIssue", _a0)}
}

func (_c *MockHeureka_DeleteIssue_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteIssue_Call) Return(_a0 error) *MockHeureka_DeleteIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteIssue_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteIssue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueMatch provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteIssueMatch(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueMatch'
type MockHeureka_DeleteIssueMatch_Call struct {
	*mock.Call
}

// DeleteIssueMatch is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteIssueMatch(_a0 interface{}) *MockHeureka_DeleteIssueMatch_Call {
	return &MockHeureka_DeleteIssueMatch_Call{Call: _e.mock.On("DeleteIssueMatch", _a0)}
}

func (_c *MockHeureka_DeleteIssueMatch_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteIssueMatch_Call) Return(_a0 error) *MockHeureka_DeleteIssueMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteIssueMatch_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteIssueMatchChange(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueMatchChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueMatchChange'
type MockHeureka_DeleteIssueMatchChange_Call struct {
	*mock.Call
}

// DeleteIssueMatchChange is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteIssueMatchChange(_a0 interface{}) *MockHeureka_DeleteIssueMatchChange_Call {
	return &MockHeureka_DeleteIssueMatchChange_Call{Call: _e.mock.On("DeleteIssueMatchChange", _a0)}
}

func (_c *MockHeureka_DeleteIssueMatchChange_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteIssueMatchChange_Call) Return(_a0 error) *MockHeureka_DeleteIssueMatchChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteIssueMatchChange_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueRepository provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteIssueRepository(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueRepository'
type MockHeureka_DeleteIssueRepository_Call struct {
	*mock.Call
}

// DeleteIssueRepository is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteIssueRepository(_a0 interface{}) *MockHeureka_DeleteIssueRepository_Call {
	return &MockHeureka_DeleteIssueRepository_Call{Call: _e.mock.On("DeleteIssueRepository", _a0)}
}

func (_c *MockHeureka_DeleteIssueRepository_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteIssueRepository_Call) Return(_a0 error) *MockHeureka_DeleteIssueRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteIssueRepository_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueVariant provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteIssueVariant(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueVariant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueVariant'
type MockHeureka_DeleteIssueVariant_Call struct {
	*mock.Call
}

// DeleteIssueVariant is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteIssueVariant(_a0 interface{}) *MockHeureka_DeleteIssueVariant_Call {
	return &MockHeureka_DeleteIssueVariant_Call{Call: _e.mock.On("DeleteIssueVariant", _a0)}
}

func (_c *MockHeureka_DeleteIssueVariant_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteIssueVariant_Call) Return(_a0 error) *MockHeureka_DeleteIssueVariant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteIssueVariant_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: id
func (_m *MockHeureka) DeleteService(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockHeureka_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - id int64
func (_e *MockHeureka_Expecter) DeleteService(id interface{}) *MockHeureka_DeleteService_Call {
	return &MockHeureka_DeleteService_Call{Call: _e.mock.On("DeleteService", id)}
}

func (_c *MockHeureka_DeleteService_Call) Run(run func(id int64)) *MockHeureka_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteService_Call) Return(_a0 error) *MockHeureka_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteService_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSupportGroup provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteSupportGroup(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSupportGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSupportGroup'
type MockHeureka_DeleteSupportGroup_Call struct {
	*mock.Call
}

// DeleteSupportGroup is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteSupportGroup(_a0 interface{}) *MockHeureka_DeleteSupportGroup_Call {
	return &MockHeureka_DeleteSupportGroup_Call{Call: _e.mock.On("DeleteSupportGroup", _a0)}
}

func (_c *MockHeureka_DeleteSupportGroup_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteSupportGroup_Call) Return(_a0 error) *MockHeureka_DeleteSupportGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteSupportGroup_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *MockHeureka) DeleteUser(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockHeureka_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) DeleteUser(_a0 interface{}) *MockHeureka_DeleteUser_Call {
	return &MockHeureka_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0)}
}

func (_c *MockHeureka_DeleteUser_Call) Run(run func(_a0 int64)) *MockHeureka_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_DeleteUser_Call) Return(_a0 error) *MockHeureka_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_DeleteUser_Call) RunAndReturn(run func(int64) error) *MockHeureka_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivity provides a mock function with given fields: _a0
func (_m *MockHeureka) GetActivity(_a0 int64) (*entity.Activity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Activity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_GetActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivity'
type MockHeureka_GetActivity_Call struct {
	*mock.Call
}

// GetActivity is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) GetActivity(_a0 interface{}) *MockHeureka_GetActivity_Call {
	return &MockHeureka_GetActivity_Call{Call: _e.mock.On("GetActivity", _a0)}
}

func (_c *MockHeureka_GetActivity_Call) Run(run func(_a0 int64)) *MockHeureka_GetActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_GetActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_GetActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_GetActivity_Call) RunAndReturn(run func(int64) (*entity.Activity, error)) *MockHeureka_GetActivity_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueMatch provides a mock function with given fields: _a0
func (_m *MockHeureka) GetIssueMatch(_a0 int64) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.IssueMatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.IssueMatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_GetIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueMatch'
type MockHeureka_GetIssueMatch_Call struct {
	*mock.Call
}

// GetIssueMatch is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) GetIssueMatch(_a0 interface{}) *MockHeureka_GetIssueMatch_Call {
	return &MockHeureka_GetIssueMatch_Call{Call: _e.mock.On("GetIssueMatch", _a0)}
}

func (_c *MockHeureka_GetIssueMatch_Call) Run(run func(_a0 int64)) *MockHeureka_GetIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_GetIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockHeureka_GetIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_GetIssueMatch_Call) RunAndReturn(run func(int64) (*entity.IssueMatch, error)) *MockHeureka_GetIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: serviceId
func (_m *MockHeureka) GetService(serviceId int64) (*entity.Service, error) {
	ret := _m.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Service, error)); ok {
		return rf(serviceId)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Service); ok {
		r0 = rf(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(serviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockHeureka_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - serviceId int64
func (_e *MockHeureka_Expecter) GetService(serviceId interface{}) *MockHeureka_GetService_Call {
	return &MockHeureka_GetService_Call{Call: _e.mock.On("GetService", serviceId)}
}

func (_c *MockHeureka_GetService_Call) Run(run func(serviceId int64)) *MockHeureka_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_GetService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_GetService_Call) RunAndReturn(run func(int64) (*entity.Service, error)) *MockHeureka_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeverity provides a mock function with given fields: _a0
func (_m *MockHeureka) GetSeverity(_a0 *entity.SeverityFilter) (*entity.Severity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSeverity")
	}

	var r0 *entity.Severity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SeverityFilter) (*entity.Severity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SeverityFilter) *entity.Severity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Severity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SeverityFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_GetSeverity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeverity'
type MockHeureka_GetSeverity_Call struct {
	*mock.Call
}

// GetSeverity is a helper method to define mock.On call
//   - _a0 *entity.SeverityFilter
func (_e *MockHeureka_Expecter) GetSeverity(_a0 interface{}) *MockHeureka_GetSeverity_Call {
	return &MockHeureka_GetSeverity_Call{Call: _e.mock.On("GetSeverity", _a0)}
}

func (_c *MockHeureka_GetSeverity_Call) Run(run func(_a0 *entity.SeverityFilter)) *MockHeureka_GetSeverity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SeverityFilter))
	})
	return _c
}

func (_c *MockHeureka_GetSeverity_Call) Return(_a0 *entity.Severity, _a1 error) *MockHeureka_GetSeverity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_GetSeverity_Call) RunAndReturn(run func(*entity.SeverityFilter) (*entity.Severity, error)) *MockHeureka_GetSeverity_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportGroup provides a mock function with given fields: _a0
func (_m *MockHeureka) GetSupportGroup(_a0 int64) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.SupportGroup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.SupportGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_GetSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportGroup'
type MockHeureka_GetSupportGroup_Call struct {
	*mock.Call
}

// GetSupportGroup is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockHeureka_Expecter) GetSupportGroup(_a0 interface{}) *MockHeureka_GetSupportGroup_Call {
	return &MockHeureka_GetSupportGroup_Call{Call: _e.mock.On("GetSupportGroup", _a0)}
}

func (_c *MockHeureka_GetSupportGroup_Call) Run(run func(_a0 int64)) *MockHeureka_GetSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockHeureka_GetSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_GetSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_GetSupportGroup_Call) RunAndReturn(run func(int64) (*entity.SupportGroup, error)) *MockHeureka_GetSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivities provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListActivities(_a0 *entity.ActivityFilter, _a1 *entity.ListOptions) (*entity.List[entity.ActivityResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListActivities")
	}

	var r0 *entity.List[entity.ActivityResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter, *entity.ListOptions) (*entity.List[entity.ActivityResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.ActivityFilter, *entity.ListOptions) *entity.List[entity.ActivityResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.ActivityResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ActivityFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivities'
type MockHeureka_ListActivities_Call struct {
	*mock.Call
}

// ListActivities is a helper method to define mock.On call
//   - _a0 *entity.ActivityFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListActivities(_a0 interface{}, _a1 interface{}) *MockHeureka_ListActivities_Call {
	return &MockHeureka_ListActivities_Call{Call: _e.mock.On("ListActivities", _a0, _a1)}
}

func (_c *MockHeureka_ListActivities_Call) Run(run func(_a0 *entity.ActivityFilter, _a1 *entity.ListOptions)) *MockHeureka_ListActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ActivityFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListActivities_Call) Return(_a0 *entity.List[entity.ActivityResult], _a1 error) *MockHeureka_ListActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListActivities_Call) RunAndReturn(run func(*entity.ActivityFilter, *entity.ListOptions) (*entity.List[entity.ActivityResult], error)) *MockHeureka_ListActivities_Call {
	_c.Call.Return(run)
	return _c
}

// ListComponentInstances provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListComponentInstances(_a0 *entity.ComponentInstanceFilter, _a1 *entity.ListOptions) (*entity.List[entity.ComponentInstanceResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentInstances")
	}

	var r0 *entity.List[entity.ComponentInstanceResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter, *entity.ListOptions) (*entity.List[entity.ComponentInstanceResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstanceFilter, *entity.ListOptions) *entity.List[entity.ComponentInstanceResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.ComponentInstanceResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstanceFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListComponentInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComponentInstances'
type MockHeureka_ListComponentInstances_Call struct {
	*mock.Call
}

// ListComponentInstances is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstanceFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListComponentInstances(_a0 interface{}, _a1 interface{}) *MockHeureka_ListComponentInstances_Call {
	return &MockHeureka_ListComponentInstances_Call{Call: _e.mock.On("ListComponentInstances", _a0, _a1)}
}

func (_c *MockHeureka_ListComponentInstances_Call) Run(run func(_a0 *entity.ComponentInstanceFilter, _a1 *entity.ListOptions)) *MockHeureka_ListComponentInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstanceFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListComponentInstances_Call) Return(_a0 *entity.List[entity.ComponentInstanceResult], _a1 error) *MockHeureka_ListComponentInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListComponentInstances_Call) RunAndReturn(run func(*entity.ComponentInstanceFilter, *entity.ListOptions) (*entity.List[entity.ComponentInstanceResult], error)) *MockHeureka_ListComponentInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListComponentNames provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListComponentNames(_a0 *entity.ComponentFilter, _a1 *entity.ListOptions) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter, *entity.ListOptions) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListComponentNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComponentNames'
type MockHeureka_ListComponentNames_Call struct {
	*mock.Call
}

// ListComponentNames is a helper method to define mock.On call
//   - _a0 *entity.ComponentFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListComponentNames(_a0 interface{}, _a1 interface{}) *MockHeureka_ListComponentNames_Call {
	return &MockHeureka_ListComponentNames_Call{Call: _e.mock.On("ListComponentNames", _a0, _a1)}
}

func (_c *MockHeureka_ListComponentNames_Call) Run(run func(_a0 *entity.ComponentFilter, _a1 *entity.ListOptions)) *MockHeureka_ListComponentNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListComponentNames_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListComponentNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListComponentNames_Call) RunAndReturn(run func(*entity.ComponentFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListComponentNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListComponentVersions provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListComponentVersions(_a0 *entity.ComponentVersionFilter, _a1 *entity.ListOptions) (*entity.List[entity.ComponentVersionResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentVersions")
	}

	var r0 *entity.List[entity.ComponentVersionResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter, *entity.ListOptions) (*entity.List[entity.ComponentVersionResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersionFilter, *entity.ListOptions) *entity.List[entity.ComponentVersionResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.ComponentVersionResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersionFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListComponentVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComponentVersions'
type MockHeureka_ListComponentVersions_Call struct {
	*mock.Call
}

// ListComponentVersions is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersionFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListComponentVersions(_a0 interface{}, _a1 interface{}) *MockHeureka_ListComponentVersions_Call {
	return &MockHeureka_ListComponentVersions_Call{Call: _e.mock.On("ListComponentVersions", _a0, _a1)}
}

func (_c *MockHeureka_ListComponentVersions_Call) Run(run func(_a0 *entity.ComponentVersionFilter, _a1 *entity.ListOptions)) *MockHeureka_ListComponentVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersionFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListComponentVersions_Call) Return(_a0 *entity.List[entity.ComponentVersionResult], _a1 error) *MockHeureka_ListComponentVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListComponentVersions_Call) RunAndReturn(run func(*entity.ComponentVersionFilter, *entity.ListOptions) (*entity.List[entity.ComponentVersionResult], error)) *MockHeureka_ListComponentVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListComponents provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListComponents(_a0 *entity.ComponentFilter, _a1 *entity.ListOptions) (*entity.List[entity.ComponentResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *entity.List[entity.ComponentResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter, *entity.ListOptions) (*entity.List[entity.ComponentResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentFilter, *entity.ListOptions) *entity.List[entity.ComponentResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.ComponentResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComponents'
type MockHeureka_ListComponents_Call struct {
	*mock.Call
}

// ListComponents is a helper method to define mock.On call
//   - _a0 *entity.ComponentFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListComponents(_a0 interface{}, _a1 interface{}) *MockHeureka_ListComponents_Call {
	return &MockHeureka_ListComponents_Call{Call: _e.mock.On("ListComponents", _a0, _a1)}
}

func (_c *MockHeureka_ListComponents_Call) Run(run func(_a0 *entity.ComponentFilter, _a1 *entity.ListOptions)) *MockHeureka_ListComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListComponents_Call) Return(_a0 *entity.List[entity.ComponentResult], _a1 error) *MockHeureka_ListComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListComponents_Call) RunAndReturn(run func(*entity.ComponentFilter, *entity.ListOptions) (*entity.List[entity.ComponentResult], error)) *MockHeureka_ListComponents_Call {
	_c.Call.Return(run)
	return _c
}

// ListEffectiveIssueVariants provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListEffectiveIssueVariants(_a0 *entity.IssueVariantFilter, _a1 *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListEffectiveIssueVariants")
	}

	var r0 *entity.List[entity.IssueVariantResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter, *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter, *entity.ListOptions) *entity.List[entity.IssueVariantResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.IssueVariantResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariantFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListEffectiveIssueVariants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEffectiveIssueVariants'
type MockHeureka_ListEffectiveIssueVariants_Call struct {
	*mock.Call
}

// ListEffectiveIssueVariants is a helper method to define mock.On call
//   - _a0 *entity.IssueVariantFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListEffectiveIssueVariants(_a0 interface{}, _a1 interface{}) *MockHeureka_ListEffectiveIssueVariants_Call {
	return &MockHeureka_ListEffectiveIssueVariants_Call{Call: _e.mock.On("ListEffectiveIssueVariants", _a0, _a1)}
}

func (_c *MockHeureka_ListEffectiveIssueVariants_Call) Run(run func(_a0 *entity.IssueVariantFilter, _a1 *entity.ListOptions)) *MockHeureka_ListEffectiveIssueVariants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariantFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListEffectiveIssueVariants_Call) Return(_a0 *entity.List[entity.IssueVariantResult], _a1 error) *MockHeureka_ListEffectiveIssueVariants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListEffectiveIssueVariants_Call) RunAndReturn(run func(*entity.IssueVariantFilter, *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error)) *MockHeureka_ListEffectiveIssueVariants_Call {
	_c.Call.Return(run)
	return _c
}

// ListEvidences provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListEvidences(_a0 *entity.EvidenceFilter, _a1 *entity.ListOptions) (*entity.List[entity.EvidenceResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListEvidences")
	}

	var r0 *entity.List[entity.EvidenceResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter, *entity.ListOptions) (*entity.List[entity.EvidenceResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.EvidenceFilter, *entity.ListOptions) *entity.List[entity.EvidenceResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.EvidenceResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.EvidenceFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListEvidences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEvidences'
type MockHeureka_ListEvidences_Call struct {
	*mock.Call
}

// ListEvidences is a helper method to define mock.On call
//   - _a0 *entity.EvidenceFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListEvidences(_a0 interface{}, _a1 interface{}) *MockHeureka_ListEvidences_Call {
	return &MockHeureka_ListEvidences_Call{Call: _e.mock.On("ListEvidences", _a0, _a1)}
}

func (_c *MockHeureka_ListEvidences_Call) Run(run func(_a0 *entity.EvidenceFilter, _a1 *entity.ListOptions)) *MockHeureka_ListEvidences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.EvidenceFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListEvidences_Call) Return(_a0 *entity.List[entity.EvidenceResult], _a1 error) *MockHeureka_ListEvidences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListEvidences_Call) RunAndReturn(run func(*entity.EvidenceFilter, *entity.ListOptions) (*entity.List[entity.EvidenceResult], error)) *MockHeureka_ListEvidences_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueMatchChanges provides a mock function with given fields: filter, options
func (_m *MockHeureka) ListIssueMatchChanges(filter *entity.IssueMatchChangeFilter, options *entity.ListOptions) (*entity.List[entity.IssueMatchChangeResult], error) {
	ret := _m.Called(filter, options)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueMatchChanges")
	}

	var r0 *entity.List[entity.IssueMatchChangeResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter, *entity.ListOptions) (*entity.List[entity.IssueMatchChangeResult], error)); ok {
		return rf(filter, options)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChangeFilter, *entity.ListOptions) *entity.List[entity.IssueMatchChangeResult]); ok {
		r0 = rf(filter, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.IssueMatchChangeResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChangeFilter, *entity.ListOptions) error); ok {
		r1 = rf(filter, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssueMatchChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueMatchChanges'
type MockHeureka_ListIssueMatchChanges_Call struct {
	*mock.Call
}

// ListIssueMatchChanges is a helper method to define mock.On call
//   - filter *entity.IssueMatchChangeFilter
//   - options *entity.ListOptions
func (_e *MockHeureka_Expecter) ListIssueMatchChanges(filter interface{}, options interface{}) *MockHeureka_ListIssueMatchChanges_Call {
	return &MockHeureka_ListIssueMatchChanges_Call{Call: _e.mock.On("ListIssueMatchChanges", filter, options)}
}

func (_c *MockHeureka_ListIssueMatchChanges_Call) Run(run func(filter *entity.IssueMatchChangeFilter, options *entity.ListOptions)) *MockHeureka_ListIssueMatchChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChangeFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssueMatchChanges_Call) Return(_a0 *entity.List[entity.IssueMatchChangeResult], _a1 error) *MockHeureka_ListIssueMatchChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssueMatchChanges_Call) RunAndReturn(run func(*entity.IssueMatchChangeFilter, *entity.ListOptions) (*entity.List[entity.IssueMatchChangeResult], error)) *MockHeureka_ListIssueMatchChanges_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueMatches provides a mock function with given fields: filter, options
func (_m *MockHeureka) ListIssueMatches(filter *entity.IssueMatchFilter, options *entity.ListOptions) (*entity.List[entity.IssueMatchResult], error) {
	ret := _m.Called(filter, options)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueMatches")
	}

	var r0 *entity.List[entity.IssueMatchResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter, *entity.ListOptions) (*entity.List[entity.IssueMatchResult], error)); ok {
		return rf(filter, options)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchFilter, *entity.ListOptions) *entity.List[entity.IssueMatchResult]); ok {
		r0 = rf(filter, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.IssueMatchResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchFilter, *entity.ListOptions) error); ok {
		r1 = rf(filter, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssueMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueMatches'
type MockHeureka_ListIssueMatches_Call struct {
	*mock.Call
}

// ListIssueMatches is a helper method to define mock.On call
//   - filter *entity.IssueMatchFilter
//   - options *entity.ListOptions
func (_e *MockHeureka_Expecter) ListIssueMatches(filter interface{}, options interface{}) *MockHeureka_ListIssueMatches_Call {
	return &MockHeureka_ListIssueMatches_Call{Call: _e.mock.On("ListIssueMatches", filter, options)}
}

func (_c *MockHeureka_ListIssueMatches_Call) Run(run func(filter *entity.IssueMatchFilter, options *entity.ListOptions)) *MockHeureka_ListIssueMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssueMatches_Call) Return(_a0 *entity.List[entity.IssueMatchResult], _a1 error) *MockHeureka_ListIssueMatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssueMatches_Call) RunAndReturn(run func(*entity.IssueMatchFilter, *entity.ListOptions) (*entity.List[entity.IssueMatchResult], error)) *MockHeureka_ListIssueMatches_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueNames provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListIssueNames(_a0 *entity.IssueFilter, _a1 *entity.ListOptions) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter, *entity.ListOptions) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssueNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueNames'
type MockHeureka_ListIssueNames_Call struct {
	*mock.Call
}

// ListIssueNames is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListIssueNames(_a0 interface{}, _a1 interface{}) *MockHeureka_ListIssueNames_Call {
	return &MockHeureka_ListIssueNames_Call{Call: _e.mock.On("ListIssueNames", _a0, _a1)}
}

func (_c *MockHeureka_ListIssueNames_Call) Run(run func(_a0 *entity.IssueFilter, _a1 *entity.ListOptions)) *MockHeureka_ListIssueNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssueNames_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListIssueNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssueNames_Call) RunAndReturn(run func(*entity.IssueFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListIssueNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueRepositories provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListIssueRepositories(_a0 *entity.IssueRepositoryFilter, _a1 *entity.ListOptions) (*entity.List[entity.IssueRepositoryResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueRepositories")
	}

	var r0 *entity.List[entity.IssueRepositoryResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter, *entity.ListOptions) (*entity.List[entity.IssueRepositoryResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepositoryFilter, *entity.ListOptions) *entity.List[entity.IssueRepositoryResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.IssueRepositoryResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepositoryFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssueRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueRepositories'
type MockHeureka_ListIssueRepositories_Call struct {
	*mock.Call
}

// ListIssueRepositories is a helper method to define mock.On call
//   - _a0 *entity.IssueRepositoryFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListIssueRepositories(_a0 interface{}, _a1 interface{}) *MockHeureka_ListIssueRepositories_Call {
	return &MockHeureka_ListIssueRepositories_Call{Call: _e.mock.On("ListIssueRepositories", _a0, _a1)}
}

func (_c *MockHeureka_ListIssueRepositories_Call) Run(run func(_a0 *entity.IssueRepositoryFilter, _a1 *entity.ListOptions)) *MockHeureka_ListIssueRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepositoryFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssueRepositories_Call) Return(_a0 *entity.List[entity.IssueRepositoryResult], _a1 error) *MockHeureka_ListIssueRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssueRepositories_Call) RunAndReturn(run func(*entity.IssueRepositoryFilter, *entity.ListOptions) (*entity.List[entity.IssueRepositoryResult], error)) *MockHeureka_ListIssueRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueVariants provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListIssueVariants(_a0 *entity.IssueVariantFilter, _a1 *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueVariants")
	}

	var r0 *entity.List[entity.IssueVariantResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter, *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariantFilter, *entity.ListOptions) *entity.List[entity.IssueVariantResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.IssueVariantResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariantFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssueVariants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueVariants'
type MockHeureka_ListIssueVariants_Call struct {
	*mock.Call
}

// ListIssueVariants is a helper method to define mock.On call
//   - _a0 *entity.IssueVariantFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListIssueVariants(_a0 interface{}, _a1 interface{}) *MockHeureka_ListIssueVariants_Call {
	return &MockHeureka_ListIssueVariants_Call{Call: _e.mock.On("ListIssueVariants", _a0, _a1)}
}

func (_c *MockHeureka_ListIssueVariants_Call) Run(run func(_a0 *entity.IssueVariantFilter, _a1 *entity.ListOptions)) *MockHeureka_ListIssueVariants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariantFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssueVariants_Call) Return(_a0 *entity.List[entity.IssueVariantResult], _a1 error) *MockHeureka_ListIssueVariants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssueVariants_Call) RunAndReturn(run func(*entity.IssueVariantFilter, *entity.ListOptions) (*entity.List[entity.IssueVariantResult], error)) *MockHeureka_ListIssueVariants_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssues provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListIssues(_a0 *entity.IssueFilter, _a1 *entity.IssueListOptions) (*entity.IssueList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListIssues")
	}

	var r0 *entity.IssueList
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter, *entity.IssueListOptions) (*entity.IssueList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueFilter, *entity.IssueListOptions) *entity.IssueList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueList)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueFilter, *entity.IssueListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssues'
type MockHeureka_ListIssues_Call struct {
	*mock.Call
}

// ListIssues is a helper method to define mock.On call
//   - _a0 *entity.IssueFilter
//   - _a1 *entity.IssueListOptions
func (_e *MockHeureka_Expecter) ListIssues(_a0 interface{}, _a1 interface{}) *MockHeureka_ListIssues_Call {
	return &MockHeureka_ListIssues_Call{Call: _e.mock.On("ListIssues", _a0, _a1)}
}

func (_c *MockHeureka_ListIssues_Call) Run(run func(_a0 *entity.IssueFilter, _a1 *entity.IssueListOptions)) *MockHeureka_ListIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueFilter), args[1].(*entity.IssueListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListIssues_Call) Return(_a0 *entity.IssueList, _a1 error) *MockHeureka_ListIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListIssues_Call) RunAndReturn(run func(*entity.IssueFilter, *entity.IssueListOptions) (*entity.IssueList, error)) *MockHeureka_ListIssues_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceNames provides a mock function with given fields: filter, options
func (_m *MockHeureka) ListServiceNames(filter *entity.ServiceFilter, options *entity.ListOptions) ([]string, error) {
	ret := _m.Called(filter, options)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(filter, options)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter, *entity.ListOptions) []string); ok {
		r0 = rf(filter, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter, *entity.ListOptions) error); ok {
		r1 = rf(filter, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListServiceNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceNames'
type MockHeureka_ListServiceNames_Call struct {
	*mock.Call
}

// ListServiceNames is a helper method to define mock.On call
//   - filter *entity.ServiceFilter
//   - options *entity.ListOptions
func (_e *MockHeureka_Expecter) ListServiceNames(filter interface{}, options interface{}) *MockHeureka_ListServiceNames_Call {
	return &MockHeureka_ListServiceNames_Call{Call: _e.mock.On("ListServiceNames", filter, options)}
}

func (_c *MockHeureka_ListServiceNames_Call) Run(run func(filter *entity.ServiceFilter, options *entity.ListOptions)) *MockHeureka_ListServiceNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListServiceNames_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListServiceNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListServiceNames_Call) RunAndReturn(run func(*entity.ServiceFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListServiceNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: filter, options
func (_m *MockHeureka) ListServices(filter *entity.ServiceFilter, options *entity.ListOptions) (*entity.List[entity.ServiceResult], error) {
	ret := _m.Called(filter, options)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *entity.List[entity.ServiceResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter, *entity.ListOptions) (*entity.List[entity.ServiceResult], error)); ok {
		return rf(filter, options)
	}
	if rf, ok := ret.Get(0).(func(*entity.ServiceFilter, *entity.ListOptions) *entity.List[entity.ServiceResult]); ok {
		r0 = rf(filter, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.ServiceResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ServiceFilter, *entity.ListOptions) error); ok {
		r1 = rf(filter, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockHeureka_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - filter *entity.ServiceFilter
//   - options *entity.ListOptions
func (_e *MockHeureka_Expecter) ListServices(filter interface{}, options interface{}) *MockHeureka_ListServices_Call {
	return &MockHeureka_ListServices_Call{Call: _e.mock.On("ListServices", filter, options)}
}

func (_c *MockHeureka_ListServices_Call) Run(run func(filter *entity.ServiceFilter, options *entity.ListOptions)) *MockHeureka_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ServiceFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListServices_Call) Return(_a0 *entity.List[entity.ServiceResult], _a1 error) *MockHeureka_ListServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListServices_Call) RunAndReturn(run func(*entity.ServiceFilter, *entity.ListOptions) (*entity.List[entity.ServiceResult], error)) *MockHeureka_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListSupportGroupNames provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListSupportGroupNames(_a0 *entity.SupportGroupFilter, _a1 *entity.ListOptions) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportGroupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter, *entity.ListOptions) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListSupportGroupNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSupportGroupNames'
type MockHeureka_ListSupportGroupNames_Call struct {
	*mock.Call
}

// ListSupportGroupNames is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListSupportGroupNames(_a0 interface{}, _a1 interface{}) *MockHeureka_ListSupportGroupNames_Call {
	return &MockHeureka_ListSupportGroupNames_Call{Call: _e.mock.On("ListSupportGroupNames", _a0, _a1)}
}

func (_c *MockHeureka_ListSupportGroupNames_Call) Run(run func(_a0 *entity.SupportGroupFilter, _a1 *entity.ListOptions)) *MockHeureka_ListSupportGroupNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListSupportGroupNames_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListSupportGroupNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListSupportGroupNames_Call) RunAndReturn(run func(*entity.SupportGroupFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListSupportGroupNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListSupportGroups provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListSupportGroups(_a0 *entity.SupportGroupFilter, _a1 *entity.ListOptions) (*entity.List[entity.SupportGroupResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportGroups")
	}

	var r0 *entity.List[entity.SupportGroupResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter, *entity.ListOptions) (*entity.List[entity.SupportGroupResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroupFilter, *entity.ListOptions) *entity.List[entity.SupportGroupResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.SupportGroupResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroupFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListSupportGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSupportGroups'
type MockHeureka_ListSupportGroups_Call struct {
	*mock.Call
}

// ListSupportGroups is a helper method to define mock.On call
//   - _a0 *entity.SupportGroupFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListSupportGroups(_a0 interface{}, _a1 interface{}) *MockHeureka_ListSupportGroups_Call {
	return &MockHeureka_ListSupportGroups_Call{Call: _e.mock.On("ListSupportGroups", _a0, _a1)}
}

func (_c *MockHeureka_ListSupportGroups_Call) Run(run func(_a0 *entity.SupportGroupFilter, _a1 *entity.ListOptions)) *MockHeureka_ListSupportGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroupFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListSupportGroups_Call) Return(_a0 *entity.List[entity.SupportGroupResult], _a1 error) *MockHeureka_ListSupportGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListSupportGroups_Call) RunAndReturn(run func(*entity.SupportGroupFilter, *entity.ListOptions) (*entity.List[entity.SupportGroupResult], error)) *MockHeureka_ListSupportGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListUniqueUserIDs provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListUniqueUserIDs(_a0 *entity.UserFilter, _a1 *entity.ListOptions) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListUniqueUserIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListUniqueUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUniqueUserIDs'
type MockHeureka_ListUniqueUserIDs_Call struct {
	*mock.Call
}

// ListUniqueUserIDs is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListUniqueUserIDs(_a0 interface{}, _a1 interface{}) *MockHeureka_ListUniqueUserIDs_Call {
	return &MockHeureka_ListUniqueUserIDs_Call{Call: _e.mock.On("ListUniqueUserIDs", _a0, _a1)}
}

func (_c *MockHeureka_ListUniqueUserIDs_Call) Run(run func(_a0 *entity.UserFilter, _a1 *entity.ListOptions)) *MockHeureka_ListUniqueUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListUniqueUserIDs_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListUniqueUserIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListUniqueUserIDs_Call) RunAndReturn(run func(*entity.UserFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListUniqueUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserNames provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListUserNames(_a0 *entity.UserFilter, _a1 *entity.ListOptions) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListUserNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListUserNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserNames'
type MockHeureka_ListUserNames_Call struct {
	*mock.Call
}

// ListUserNames is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListUserNames(_a0 interface{}, _a1 interface{}) *MockHeureka_ListUserNames_Call {
	return &MockHeureka_ListUserNames_Call{Call: _e.mock.On("ListUserNames", _a0, _a1)}
}

func (_c *MockHeureka_ListUserNames_Call) Run(run func(_a0 *entity.UserFilter, _a1 *entity.ListOptions)) *MockHeureka_ListUserNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListUserNames_Call) Return(_a0 []string, _a1 error) *MockHeureka_ListUserNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListUserNames_Call) RunAndReturn(run func(*entity.UserFilter, *entity.ListOptions) ([]string, error)) *MockHeureka_ListUserNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) ListUsers(_a0 *entity.UserFilter, _a1 *entity.ListOptions) (*entity.List[entity.UserResult], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *entity.List[entity.UserResult]
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) (*entity.List[entity.UserResult], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserFilter, *entity.ListOptions) *entity.List[entity.UserResult]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List[entity.UserResult])
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserFilter, *entity.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockHeureka_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - _a0 *entity.UserFilter
//   - _a1 *entity.ListOptions
func (_e *MockHeureka_Expecter) ListUsers(_a0 interface{}, _a1 interface{}) *MockHeureka_ListUsers_Call {
	return &MockHeureka_ListUsers_Call{Call: _e.mock.On("ListUsers", _a0, _a1)}
}

func (_c *MockHeureka_ListUsers_Call) Run(run func(_a0 *entity.UserFilter, _a1 *entity.ListOptions)) *MockHeureka_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserFilter), args[1].(*entity.ListOptions))
	})
	return _c
}

func (_c *MockHeureka_ListUsers_Call) Return(_a0 *entity.List[entity.UserResult], _a1 error) *MockHeureka_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_ListUsers_Call) RunAndReturn(run func(*entity.UserFilter, *entity.ListOptions) (*entity.List[entity.UserResult], error)) *MockHeureka_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveComponentVersionFromIssue provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveComponentVersionFromIssue(_a0 int64, _a1 int64) (*entity.Issue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveComponentVersionFromIssue")
	}

	var r0 *entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Issue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Issue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveComponentVersionFromIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveComponentVersionFromIssue'
type MockHeureka_RemoveComponentVersionFromIssue_Call struct {
	*mock.Call
}

// RemoveComponentVersionFromIssue is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveComponentVersionFromIssue(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveComponentVersionFromIssue_Call {
	return &MockHeureka_RemoveComponentVersionFromIssue_Call{Call: _e.mock.On("RemoveComponentVersionFromIssue", _a0, _a1)}
}

func (_c *MockHeureka_RemoveComponentVersionFromIssue_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveComponentVersionFromIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveComponentVersionFromIssue_Call) Return(_a0 *entity.Issue, _a1 error) *MockHeureka_RemoveComponentVersionFromIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveComponentVersionFromIssue_Call) RunAndReturn(run func(int64, int64) (*entity.Issue, error)) *MockHeureka_RemoveComponentVersionFromIssue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEvidenceFromIssueMatch provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveEvidenceFromIssueMatch(_a0 int64, _a1 int64) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEvidenceFromIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.IssueMatch, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.IssueMatch); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveEvidenceFromIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEvidenceFromIssueMatch'
type MockHeureka_RemoveEvidenceFromIssueMatch_Call struct {
	*mock.Call
}

// RemoveEvidenceFromIssueMatch is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveEvidenceFromIssueMatch(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveEvidenceFromIssueMatch_Call {
	return &MockHeureka_RemoveEvidenceFromIssueMatch_Call{Call: _e.mock.On("RemoveEvidenceFromIssueMatch", _a0, _a1)}
}

func (_c *MockHeureka_RemoveEvidenceFromIssueMatch_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveEvidenceFromIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockHeureka_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveEvidenceFromIssueMatch_Call) RunAndReturn(run func(int64, int64) (*entity.IssueMatch, error)) *MockHeureka_RemoveEvidenceFromIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIssueFromActivity provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveIssueFromActivity(_a0 int64, _a1 int64) (*entity.Activity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueFromActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Activity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Activity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveIssueFromActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIssueFromActivity'
type MockHeureka_RemoveIssueFromActivity_Call struct {
	*mock.Call
}

// RemoveIssueFromActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveIssueFromActivity(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveIssueFromActivity_Call {
	return &MockHeureka_RemoveIssueFromActivity_Call{Call: _e.mock.On("RemoveIssueFromActivity", _a0, _a1)}
}

func (_c *MockHeureka_RemoveIssueFromActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveIssueFromActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveIssueFromActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_RemoveIssueFromActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveIssueFromActivity_Call) RunAndReturn(run func(int64, int64) (*entity.Activity, error)) *MockHeureka_RemoveIssueFromActivity_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIssueRepositoryFromService provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveIssueRepositoryFromService(_a0 int64, _a1 int64) (*entity.Service, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueRepositoryFromService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Service, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Service); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveIssueRepositoryFromService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIssueRepositoryFromService'
type MockHeureka_RemoveIssueRepositoryFromService_Call struct {
	*mock.Call
}

// RemoveIssueRepositoryFromService is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveIssueRepositoryFromService(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveIssueRepositoryFromService_Call {
	return &MockHeureka_RemoveIssueRepositoryFromService_Call{Call: _e.mock.On("RemoveIssueRepositoryFromService", _a0, _a1)}
}

func (_c *MockHeureka_RemoveIssueRepositoryFromService_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveIssueRepositoryFromService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveIssueRepositoryFromService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_RemoveIssueRepositoryFromService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveIssueRepositoryFromService_Call) RunAndReturn(run func(int64, int64) (*entity.Service, error)) *MockHeureka_RemoveIssueRepositoryFromService_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOwnerFromService provides a mock function with given fields: serviceId, ownerId
func (_m *MockHeureka) RemoveOwnerFromService(serviceId int64, ownerId int64) (*entity.Service, error) {
	ret := _m.Called(serviceId, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOwnerFromService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Service, error)); ok {
		return rf(serviceId, ownerId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Service); ok {
		r0 = rf(serviceId, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(serviceId, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveOwnerFromService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwnerFromService'
type MockHeureka_RemoveOwnerFromService_Call struct {
	*mock.Call
}

// RemoveOwnerFromService is a helper method to define mock.On call
//   - serviceId int64
//   - ownerId int64
func (_e *MockHeureka_Expecter) RemoveOwnerFromService(serviceId interface{}, ownerId interface{}) *MockHeureka_RemoveOwnerFromService_Call {
	return &MockHeureka_RemoveOwnerFromService_Call{Call: _e.mock.On("RemoveOwnerFromService", serviceId, ownerId)}
}

func (_c *MockHeureka_RemoveOwnerFromService_Call) Run(run func(serviceId int64, ownerId int64)) *MockHeureka_RemoveOwnerFromService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveOwnerFromService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_RemoveOwnerFromService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveOwnerFromService_Call) RunAndReturn(run func(int64, int64) (*entity.Service, error)) *MockHeureka_RemoveOwnerFromService_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromActivity provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveServiceFromActivity(_a0 int64, _a1 int64) (*entity.Activity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.Activity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.Activity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveServiceFromActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromActivity'
type MockHeureka_RemoveServiceFromActivity_Call struct {
	*mock.Call
}

// RemoveServiceFromActivity is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveServiceFromActivity(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveServiceFromActivity_Call {
	return &MockHeureka_RemoveServiceFromActivity_Call{Call: _e.mock.On("RemoveServiceFromActivity", _a0, _a1)}
}

func (_c *MockHeureka_RemoveServiceFromActivity_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveServiceFromActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveServiceFromActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_RemoveServiceFromActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveServiceFromActivity_Call) RunAndReturn(run func(int64, int64) (*entity.Activity, error)) *MockHeureka_RemoveServiceFromActivity_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveServiceFromSupportGroup(_a0 int64, _a1 int64) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.SupportGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.SupportGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveServiceFromSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromSupportGroup'
type MockHeureka_RemoveServiceFromSupportGroup_Call struct {
	*mock.Call
}

// RemoveServiceFromSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveServiceFromSupportGroup(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveServiceFromSupportGroup_Call {
	return &MockHeureka_RemoveServiceFromSupportGroup_Call{Call: _e.mock.On("RemoveServiceFromSupportGroup", _a0, _a1)}
}

func (_c *MockHeureka_RemoveServiceFromSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveServiceFromSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveServiceFromSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_RemoveServiceFromSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveServiceFromSupportGroup_Call) RunAndReturn(run func(int64, int64) (*entity.SupportGroup, error)) *MockHeureka_RemoveServiceFromSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromSupportGroup provides a mock function with given fields: _a0, _a1
func (_m *MockHeureka) RemoveUserFromSupportGroup(_a0 int64, _a1 int64) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.SupportGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.SupportGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_RemoveUserFromSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromSupportGroup'
type MockHeureka_RemoveUserFromSupportGroup_Call struct {
	*mock.Call
}

// RemoveUserFromSupportGroup is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int64
func (_e *MockHeureka_Expecter) RemoveUserFromSupportGroup(_a0 interface{}, _a1 interface{}) *MockHeureka_RemoveUserFromSupportGroup_Call {
	return &MockHeureka_RemoveUserFromSupportGroup_Call{Call: _e.mock.On("RemoveUserFromSupportGroup", _a0, _a1)}
}

func (_c *MockHeureka_RemoveUserFromSupportGroup_Call) Run(run func(_a0 int64, _a1 int64)) *MockHeureka_RemoveUserFromSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockHeureka_RemoveUserFromSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_RemoveUserFromSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_RemoveUserFromSupportGroup_Call) RunAndReturn(run func(int64, int64) (*entity.SupportGroup, error)) *MockHeureka_RemoveUserFromSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockHeureka) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeureka_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockHeureka_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockHeureka_Expecter) Shutdown() *MockHeureka_Shutdown_Call {
	return &MockHeureka_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockHeureka_Shutdown_Call) Run(run func()) *MockHeureka_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeureka_Shutdown_Call) Return(_a0 error) *MockHeureka_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeureka_Shutdown_Call) RunAndReturn(run func() error) *MockHeureka_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActivity provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateActivity(_a0 *entity.Activity) (*entity.Activity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActivity")
	}

	var r0 *entity.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Activity) (*entity.Activity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Activity) *entity.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Activity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActivity'
type MockHeureka_UpdateActivity_Call struct {
	*mock.Call
}

// UpdateActivity is a helper method to define mock.On call
//   - _a0 *entity.Activity
func (_e *MockHeureka_Expecter) UpdateActivity(_a0 interface{}) *MockHeureka_UpdateActivity_Call {
	return &MockHeureka_UpdateActivity_Call{Call: _e.mock.On("UpdateActivity", _a0)}
}

func (_c *MockHeureka_UpdateActivity_Call) Run(run func(_a0 *entity.Activity)) *MockHeureka_UpdateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Activity))
	})
	return _c
}

func (_c *MockHeureka_UpdateActivity_Call) Return(_a0 *entity.Activity, _a1 error) *MockHeureka_UpdateActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateActivity_Call) RunAndReturn(run func(*entity.Activity) (*entity.Activity, error)) *MockHeureka_UpdateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponent provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateComponent(_a0 *entity.Component) (*entity.Component, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 *entity.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Component) (*entity.Component, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Component) *entity.Component); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Component) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponent'
type MockHeureka_UpdateComponent_Call struct {
	*mock.Call
}

// UpdateComponent is a helper method to define mock.On call
//   - _a0 *entity.Component
func (_e *MockHeureka_Expecter) UpdateComponent(_a0 interface{}) *MockHeureka_UpdateComponent_Call {
	return &MockHeureka_UpdateComponent_Call{Call: _e.mock.On("UpdateComponent", _a0)}
}

func (_c *MockHeureka_UpdateComponent_Call) Run(run func(_a0 *entity.Component)) *MockHeureka_UpdateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Component))
	})
	return _c
}

func (_c *MockHeureka_UpdateComponent_Call) Return(_a0 *entity.Component, _a1 error) *MockHeureka_UpdateComponent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateComponent_Call) RunAndReturn(run func(*entity.Component) (*entity.Component, error)) *MockHeureka_UpdateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentInstance provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateComponentInstance(_a0 *entity.ComponentInstance) (*entity.ComponentInstance, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentInstance")
	}

	var r0 *entity.ComponentInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) (*entity.ComponentInstance, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentInstance) *entity.ComponentInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentInstance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateComponentInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentInstance'
type MockHeureka_UpdateComponentInstance_Call struct {
	*mock.Call
}

// UpdateComponentInstance is a helper method to define mock.On call
//   - _a0 *entity.ComponentInstance
func (_e *MockHeureka_Expecter) UpdateComponentInstance(_a0 interface{}) *MockHeureka_UpdateComponentInstance_Call {
	return &MockHeureka_UpdateComponentInstance_Call{Call: _e.mock.On("UpdateComponentInstance", _a0)}
}

func (_c *MockHeureka_UpdateComponentInstance_Call) Run(run func(_a0 *entity.ComponentInstance)) *MockHeureka_UpdateComponentInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentInstance))
	})
	return _c
}

func (_c *MockHeureka_UpdateComponentInstance_Call) Return(_a0 *entity.ComponentInstance, _a1 error) *MockHeureka_UpdateComponentInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateComponentInstance_Call) RunAndReturn(run func(*entity.ComponentInstance) (*entity.ComponentInstance, error)) *MockHeureka_UpdateComponentInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentVersion provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateComponentVersion(_a0 *entity.ComponentVersion) (*entity.ComponentVersion, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentVersion")
	}

	var r0 *entity.ComponentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) (*entity.ComponentVersion, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.ComponentVersion) *entity.ComponentVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ComponentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ComponentVersion) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentVersion'
type MockHeureka_UpdateComponentVersion_Call struct {
	*mock.Call
}

// UpdateComponentVersion is a helper method to define mock.On call
//   - _a0 *entity.ComponentVersion
func (_e *MockHeureka_Expecter) UpdateComponentVersion(_a0 interface{}) *MockHeureka_UpdateComponentVersion_Call {
	return &MockHeureka_UpdateComponentVersion_Call{Call: _e.mock.On("UpdateComponentVersion", _a0)}
}

func (_c *MockHeureka_UpdateComponentVersion_Call) Run(run func(_a0 *entity.ComponentVersion)) *MockHeureka_UpdateComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.ComponentVersion))
	})
	return _c
}

func (_c *MockHeureka_UpdateComponentVersion_Call) Return(_a0 *entity.ComponentVersion, _a1 error) *MockHeureka_UpdateComponentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateComponentVersion_Call) RunAndReturn(run func(*entity.ComponentVersion) (*entity.ComponentVersion, error)) *MockHeureka_UpdateComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvidence provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateEvidence(_a0 *entity.Evidence) (*entity.Evidence, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvidence")
	}

	var r0 *entity.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Evidence) (*entity.Evidence, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Evidence) *entity.Evidence); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Evidence) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvidence'
type MockHeureka_UpdateEvidence_Call struct {
	*mock.Call
}

// UpdateEvidence is a helper method to define mock.On call
//   - _a0 *entity.Evidence
func (_e *MockHeureka_Expecter) UpdateEvidence(_a0 interface{}) *MockHeureka_UpdateEvidence_Call {
	return &MockHeureka_UpdateEvidence_Call{Call: _e.mock.On("UpdateEvidence", _a0)}
}

func (_c *MockHeureka_UpdateEvidence_Call) Run(run func(_a0 *entity.Evidence)) *MockHeureka_UpdateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Evidence))
	})
	return _c
}

func (_c *MockHeureka_UpdateEvidence_Call) Return(_a0 *entity.Evidence, _a1 error) *MockHeureka_UpdateEvidence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateEvidence_Call) RunAndReturn(run func(*entity.Evidence) (*entity.Evidence, error)) *MockHeureka_UpdateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssue provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateIssue(_a0 *entity.Issue) (*entity.Issue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssue")
	}

	var r0 *entity.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Issue) (*entity.Issue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Issue) *entity.Issue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Issue) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssue'
type MockHeureka_UpdateIssue_Call struct {
	*mock.Call
}

// UpdateIssue is a helper method to define mock.On call
//   - _a0 *entity.Issue
func (_e *MockHeureka_Expecter) UpdateIssue(_a0 interface{}) *MockHeureka_UpdateIssue_Call {
	return &MockHeureka_UpdateIssue_Call{Call: _e.mock.On("UpdateIssue", _a0)}
}

func (_c *MockHeureka_UpdateIssue_Call) Run(run func(_a0 *entity.Issue)) *MockHeureka_UpdateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Issue))
	})
	return _c
}

func (_c *MockHeureka_UpdateIssue_Call) Return(_a0 *entity.Issue, _a1 error) *MockHeureka_UpdateIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateIssue_Call) RunAndReturn(run func(*entity.Issue) (*entity.Issue, error)) *MockHeureka_UpdateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueMatch provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateIssueMatch(_a0 *entity.IssueMatch) (*entity.IssueMatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueMatch")
	}

	var r0 *entity.IssueMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) (*entity.IssueMatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatch) *entity.IssueMatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatch) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateIssueMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueMatch'
type MockHeureka_UpdateIssueMatch_Call struct {
	*mock.Call
}

// UpdateIssueMatch is a helper method to define mock.On call
//   - _a0 *entity.IssueMatch
func (_e *MockHeureka_Expecter) UpdateIssueMatch(_a0 interface{}) *MockHeureka_UpdateIssueMatch_Call {
	return &MockHeureka_UpdateIssueMatch_Call{Call: _e.mock.On("UpdateIssueMatch", _a0)}
}

func (_c *MockHeureka_UpdateIssueMatch_Call) Run(run func(_a0 *entity.IssueMatch)) *MockHeureka_UpdateIssueMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatch))
	})
	return _c
}

func (_c *MockHeureka_UpdateIssueMatch_Call) Return(_a0 *entity.IssueMatch, _a1 error) *MockHeureka_UpdateIssueMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateIssueMatch_Call) RunAndReturn(run func(*entity.IssueMatch) (*entity.IssueMatch, error)) *MockHeureka_UpdateIssueMatch_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueMatchChange provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateIssueMatchChange(_a0 *entity.IssueMatchChange) (*entity.IssueMatchChange, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueMatchChange")
	}

	var r0 *entity.IssueMatchChange
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueMatchChange) *entity.IssueMatchChange); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueMatchChange)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueMatchChange) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateIssueMatchChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueMatchChange'
type MockHeureka_UpdateIssueMatchChange_Call struct {
	*mock.Call
}

// UpdateIssueMatchChange is a helper method to define mock.On call
//   - _a0 *entity.IssueMatchChange
func (_e *MockHeureka_Expecter) UpdateIssueMatchChange(_a0 interface{}) *MockHeureka_UpdateIssueMatchChange_Call {
	return &MockHeureka_UpdateIssueMatchChange_Call{Call: _e.mock.On("UpdateIssueMatchChange", _a0)}
}

func (_c *MockHeureka_UpdateIssueMatchChange_Call) Run(run func(_a0 *entity.IssueMatchChange)) *MockHeureka_UpdateIssueMatchChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueMatchChange))
	})
	return _c
}

func (_c *MockHeureka_UpdateIssueMatchChange_Call) Return(_a0 *entity.IssueMatchChange, _a1 error) *MockHeureka_UpdateIssueMatchChange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateIssueMatchChange_Call) RunAndReturn(run func(*entity.IssueMatchChange) (*entity.IssueMatchChange, error)) *MockHeureka_UpdateIssueMatchChange_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueRepository provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateIssueRepository(_a0 *entity.IssueRepository) (*entity.IssueRepository, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueRepository")
	}

	var r0 *entity.IssueRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) (*entity.IssueRepository, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueRepository) *entity.IssueRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueRepository) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateIssueRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueRepository'
type MockHeureka_UpdateIssueRepository_Call struct {
	*mock.Call
}

// UpdateIssueRepository is a helper method to define mock.On call
//   - _a0 *entity.IssueRepository
func (_e *MockHeureka_Expecter) UpdateIssueRepository(_a0 interface{}) *MockHeureka_UpdateIssueRepository_Call {
	return &MockHeureka_UpdateIssueRepository_Call{Call: _e.mock.On("UpdateIssueRepository", _a0)}
}

func (_c *MockHeureka_UpdateIssueRepository_Call) Run(run func(_a0 *entity.IssueRepository)) *MockHeureka_UpdateIssueRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueRepository))
	})
	return _c
}

func (_c *MockHeureka_UpdateIssueRepository_Call) Return(_a0 *entity.IssueRepository, _a1 error) *MockHeureka_UpdateIssueRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateIssueRepository_Call) RunAndReturn(run func(*entity.IssueRepository) (*entity.IssueRepository, error)) *MockHeureka_UpdateIssueRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueVariant provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateIssueVariant(_a0 *entity.IssueVariant) (*entity.IssueVariant, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueVariant")
	}

	var r0 *entity.IssueVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) (*entity.IssueVariant, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.IssueVariant) *entity.IssueVariant); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.IssueVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.IssueVariant) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateIssueVariant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueVariant'
type MockHeureka_UpdateIssueVariant_Call struct {
	*mock.Call
}

// UpdateIssueVariant is a helper method to define mock.On call
//   - _a0 *entity.IssueVariant
func (_e *MockHeureka_Expecter) UpdateIssueVariant(_a0 interface{}) *MockHeureka_UpdateIssueVariant_Call {
	return &MockHeureka_UpdateIssueVariant_Call{Call: _e.mock.On("UpdateIssueVariant", _a0)}
}

func (_c *MockHeureka_UpdateIssueVariant_Call) Run(run func(_a0 *entity.IssueVariant)) *MockHeureka_UpdateIssueVariant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.IssueVariant))
	})
	return _c
}

func (_c *MockHeureka_UpdateIssueVariant_Call) Return(_a0 *entity.IssueVariant, _a1 error) *MockHeureka_UpdateIssueVariant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateIssueVariant_Call) RunAndReturn(run func(*entity.IssueVariant) (*entity.IssueVariant, error)) *MockHeureka_UpdateIssueVariant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: service
func (_m *MockHeureka) UpdateService(service *entity.Service) (*entity.Service, error) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *entity.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Service) (*entity.Service, error)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(*entity.Service) *entity.Service); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Service) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockHeureka_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - service *entity.Service
func (_e *MockHeureka_Expecter) UpdateService(service interface{}) *MockHeureka_UpdateService_Call {
	return &MockHeureka_UpdateService_Call{Call: _e.mock.On("UpdateService", service)}
}

func (_c *MockHeureka_UpdateService_Call) Run(run func(service *entity.Service)) *MockHeureka_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Service))
	})
	return _c
}

func (_c *MockHeureka_UpdateService_Call) Return(_a0 *entity.Service, _a1 error) *MockHeureka_UpdateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateService_Call) RunAndReturn(run func(*entity.Service) (*entity.Service, error)) *MockHeureka_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSupportGroup provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateSupportGroup(_a0 *entity.SupportGroup) (*entity.SupportGroup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSupportGroup")
	}

	var r0 *entity.SupportGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) (*entity.SupportGroup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.SupportGroup) *entity.SupportGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SupportGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.SupportGroup) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateSupportGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSupportGroup'
type MockHeureka_UpdateSupportGroup_Call struct {
	*mock.Call
}

// UpdateSupportGroup is a helper method to define mock.On call
//   - _a0 *entity.SupportGroup
func (_e *MockHeureka_Expecter) UpdateSupportGroup(_a0 interface{}) *MockHeureka_UpdateSupportGroup_Call {
	return &MockHeureka_UpdateSupportGroup_Call{Call: _e.mock.On("UpdateSupportGroup", _a0)}
}

func (_c *MockHeureka_UpdateSupportGroup_Call) Run(run func(_a0 *entity.SupportGroup)) *MockHeureka_UpdateSupportGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.SupportGroup))
	})
	return _c
}

func (_c *MockHeureka_UpdateSupportGroup_Call) Return(_a0 *entity.SupportGroup, _a1 error) *MockHeureka_UpdateSupportGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateSupportGroup_Call) RunAndReturn(run func(*entity.SupportGroup) (*entity.SupportGroup, error)) *MockHeureka_UpdateSupportGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockHeureka) UpdateUser(_a0 *entity.User) (*entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.User) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeureka_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockHeureka_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockHeureka_Expecter) UpdateUser(_a0 interface{}) *MockHeureka_UpdateUser_Call {
	return &MockHeureka_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0)}
}

func (_c *MockHeureka_UpdateUser_Call) Run(run func(_a0 *entity.User)) *MockHeureka_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockHeureka_UpdateUser_Call) Return(_a0 *entity.User, _a1 error) *MockHeureka_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeureka_UpdateUser_Call) RunAndReturn(run func(*entity.User) (*entity.User, error)) *MockHeureka_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeureka creates a new instance of MockHeureka. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeureka(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeureka {
	mock := &MockHeureka{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
