# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/schema/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph/resolver
  package: resolver
  filename_template: "{name}.go"
  omit_template_comment: true
  resolver_template: graph/resolver/resolver.gotpl

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: true

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
omit_gqlgen_version_in_file_notice: true

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
 - "github.com/cloudoperators/heureka/internal/api/graphql/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Issue:
     fields:
       issueVariants:
         resolver: true
       issueMatches:
         resolver: true
       activities:
         resolver: true
       componentVersions:
         resolver: true
  IssueMatch:
    fields:
      componentInstance:
        resolver: true
      issue:
        resolver: true
      evidences:
        resolver: true
      effectiveIssueVariants:
        resolver: true
      issueMatchChanges:
        resolver: true
  IssueMatchChange:
    fields:
      issueMatch:
        resolver: true
      activity:
        resolver: true
  Component:
    fields:
      componentVersions:
        resolver: true
  ComponentInstance:
    fields:
      componentVersion:
        resolver: true
      service:
        resolver: true
      issueMatches:
        resolver: true
  ComponentVersion:
    fields:
      component:
        resolver: true
      issues:
        resolver: true
      componentInstances:
        resolver: true
      issueCounts:
        resolver: true
  Service:
    fields:
      owners:
        resolver: true
      supportGroups:
        resolver: true
      issues:
        resolver: true
      activities:
        resolver: true
      issueRepositories:
        resolver: true
      componentInstances:
        resolver: true
      issueMatches:
        resolver: true
  SupportGroup:
    fields:
      users:
        resolver: true
      services:
        resolver: true
  Activity:
    fields:
      services:
        resolver: true
      issues:
        resolver: true
      evidences:
        resolver: true
      issueMatchChanges:
        resolver: true
  Evidence:
    fields:
      activity:
        resolver: true
      author:
        resolver: true
      issueMatches:
        resolver: true
  IssueVariant:
    fields:
      issue:
        resolver: true
      issueRepository:
        resolver: true
  IssueRepository:
    fields:
      services:
        resolver: true
      issueVariants:
        resolver: true
  User:
    fields:
      supportGroups:
        resolver: true
      services:
        resolver: true
  IssueMatchFilterValue:
    fields:
      status:
        resolver: false
      severity:
        resolver: false
      issueType:
        resolver: false
      primaryName:
        resolver: true
      serviceCcrn:
        resolver: true
      componentCcrn:
        resolver: true
      supportGroupCcrn:
        resolver: true
  ServiceFilterValue:
    fields:
      serviceCcrn:
        resolver: true
      uniqueUserId:
        resolver: true
      userName:
        resolver: true
      supportGroupCcrn:
        resolver: true
  ComponentInstanceFilterValue:
    fields:
      serviceCcrn:
        resolver: true
      supportGroupCcrn:
        resolver: true
      ccrn:
        resolver: true
      region:
        resolver: true
      cluster:
        resolver: true
      namespace:
        resolver: true
      domain:
        resolver: true
      project:
        resolver: true
  ComponentFilterValue:
    fields:
      componentCcrn:
        resolver: true
