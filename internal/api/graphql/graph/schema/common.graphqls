# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

scalar DateTime @specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time")
scalar Map

interface Node {
    id: ID!
}

interface Connection {
    totalCount: Int!
    pageInfo: PageInfo
}

interface Edge {
    node: Node!
    cursor: String
}

type Page {
    after: String
    isCurrent: Boolean
    pageNumber: Int
    pageCount: Int
}

type PageInfo {
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    isValidPage: Boolean
    pageNumber: Int
    nextPageAfter: String
    pages: [Page]
}

enum SeverityValues {
    None,
    Low,
    Medium,
    High,
    Critical
}

type SeverityCounts {
    critical: Int!
    high: Int!
    medium: Int!
    low: Int!
    none: Int!
    total: Int!
}

input DateTimeFilter {
    after: DateTime,
    before: DateTime,
}

type CVSSParameter {
    name: String
    value: String
}

type CVSSBase {
    score: Float
    attackVector: String
    attackComplexity: String
    privilegesRequired: String
    userInteraction: String
    scope: String
    confidentialityImpact: String
    integrityImpact: String
    availabilityImpact: String
}
type CVSSTemporal {
    score: Float
    exploitCodeMaturity: String
    remediationLevel: String
    reportConfidence: String
}
type CVSSEnvironmental {
    score: Float
    modifiedAttackVector: String
    modifiedAttackComplexity: String
    modifiedPrivilegesRequired: String
    modifiedUserInteraction: String
    modifiedScope: String
    modifiedConfidentialityImpact: String
    modifiedIntegrityImpact: String
    modifiedAvailabilityImpact: String
    confidentialityRequirement: String
    availabilityRequirement: String
    integrityRequirement: String
}

type CVSS {
    vector: String
    externalUrl: String
    base: CVSSBase
    temporal: CVSSTemporal
    environmental: CVSSEnvironmental
}

type Severity {
    value: SeverityValues
    score: Float
    cvss: CVSS
}

input SeverityInput {
    vector: String
    rating: SeverityValues
}

type FilterItem {
    displayName: String
    filterName: String
    values: [String]
}

type ValueItem {
    display: String
    value: String
}

type FilterValueItem {
    displayName: String
    filterName: String
    values: [ValueItem]
}

type FilterMapItem {
    displayName: String
    filterName: String
    values: [Map]
}

type Metadata {
    created_at: DateTime
    created_by: String
    deleted_at: DateTime
    updated_at: DateTime
    updated_by: String
}

enum OrderDirection {
    asc
    desc
}

enum StateFilter {
    Active,
    Deleted
}
