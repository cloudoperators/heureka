// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
// SPDX-License-Identifier: Apache-2.0

package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.wdf.sap.corp/cc/heureka/internal/api/graphql/graph"
	"github.wdf.sap.corp/cc/heureka/internal/api/graphql/graph/baseResolver"
	"github.wdf.sap.corp/cc/heureka/internal/api/graphql/graph/model"
)

// Services is the resolver for the services field.
func (r *activityResolver) Services(ctx context.Context, obj *model.Activity, filter *model.ServiceFilter, first *int, after *string) (*model.ServiceConnection, error) {
	return baseResolver.ServiceBaseResolver(r.App, ctx, filter, first, after, &model.NodeParent{
		Parent:     obj,
		ParentName: model.ActivityNodeName,
	})
}

// Issues is the resolver for the issues field.
func (r *activityResolver) Issues(ctx context.Context, obj *model.Activity, filter *model.IssueFilter, first *int, after *string) (*model.IssueConnection, error) {
	return baseResolver.IssueBaseResolver(
		r.App,
		ctx,
		filter,
		first,
		after,
		&model.NodeParent{
			Parent:     obj,
			ParentName: model.ActivityNodeName,
		})
}

// Evidences is the resolver for the evidences field.
func (r *activityResolver) Evidences(ctx context.Context, obj *model.Activity, filter *model.EvidenceFilter, first *int, after *string) (*model.EvidenceConnection, error) {
	return baseResolver.EvidenceBaseResolver(
		r.App,
		ctx,
		filter,
		first,
		after,
		&model.NodeParent{
			Parent:     obj,
			ParentName: model.ActivityNodeName,
		})
}

// IssueMatchChanges is the resolver for the issueMatchChanges field.
func (r *activityResolver) IssueMatchChanges(ctx context.Context, obj *model.Activity, filter *model.IssueMatchChangeFilter, first *int, after *string) (*model.IssueMatchChangeConnection, error) {
	return baseResolver.IssueMatchChangeBaseResolver(
		r.App,
		ctx,
		filter,
		first,
		after,
		&model.NodeParent{
			Parent:     obj,
			ParentName: model.ActivityNodeName,
		})
}

// Activity returns graph.ActivityResolver implementation.
func (r *Resolver) Activity() graph.ActivityResolver { return &activityResolver{r} }

type activityResolver struct{ *Resolver }
