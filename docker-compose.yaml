# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

# This docker-compose file is used to run the application localy in containarized environment.
# ensure to set .env file accordingly
networks:
  openfga:

services:
  heureka-db:
    image: mariadb:latest
    container_name: mariadb
    restart: always
    profiles:
      - db
    environment:
      MARIADB_USER: ${DB_USER}
      MARIADB_PASSWORD: ${DB_PASSWORD}
      MARIADB_DATABASE: ${DB_NAME}
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      # Uncomment the following lines and comment the MARIADB_ROOT_PASSWORD line to use other options
      # - MARIADB_ROOT_PASSWORD_HASH=*HASHED_PASSWORD
      # - MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=yes
      # - MARIADB_RANDOM_ROOT_PASSWORD=yes
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./.db/data:/var/lib/mysql
    ports:
      - "3306:3306"

  heureka-app:
    build: .
    container_name: heureka-app
    profiles:
      - heureka
    environment:
      DB_ADDRESS: heureka-db
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      SEED_MODE: ${SEED_MODE}
    depends_on:
      heureka-db:
        condition: service_healthy
    ports:
      - "80:80"

  valkey:
    image: valkey/valkey:7.2
    container_name: heureka-valkey
    profiles:
      - heureka
    ports:
      - "${VALKEY_PORT:-6379}:6379"
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkey-data:/data
    restart: always

  ui:
    build:
      context: ./ui/
      dockerfile: Dockerfile
      args:
        UI_GIT_REPO: https://github.com/cloudoperators/juno/
        UI_GIT_DIR: ./ui/juno/
    container_name: juno-ui
    profiles:
      - ui
    ports:
      - "3000:3000"
    restart: unless-stopped

  postgres:
    image: postgres:17
    container_name: postgres
    profiles:
      - openfga
    networks:
      - openfga
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    profiles:
      - openfga
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
    networks:
      - openfga

  heureka-openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    profiles:
      - openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
      - OPENFGA_AUTHN_METHOD=preshared
      - OPENFGA_AUTHN_PRESHARED_KEYS=${AUTH_TOKEN_SECRET}
    command: run
    networks:
      - openfga
    ports:
      # HTTP server
      - "8080:8080"
      # GRPC server
      - "8081:8081"
      # Playground
      - "3000:3000"

volumes:
  valkey-data:
