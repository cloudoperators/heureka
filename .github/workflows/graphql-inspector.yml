name: GraphQL-Inspector

on:
  pull_request:
    branches:
      - main

jobs:
  schema-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch (main)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: Create old schema file
        run: |
          mkdir -p .github/schemas
          cat base-branch/internal/api/graphql/graph/schema/*.graphqls > .github/schemas/old-schema.graphql

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          path: pr-branch

      - name: Create new schema file
        run: |
          cat pr-branch/internal/api/graphql/graph/schema/*.graphqls > .github/schemas/new-schema.graphql

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install @graphql-inspector/cli

      - name: Check Schema Changes
        id: schema-check
        continue-on-error: true
        run: |
          # Run inspector and capture the output
          INSPECTOR_OUTPUT=$(npx graphql-inspector diff .github/schemas/old-schema.graphql .github/schemas/new-schema.graphql || true)
          
          # Write output to a file for reference
          echo "$INSPECTOR_OUTPUT" > schema_changes.txt
          
          # Extract breaking changes (lines with ✖)
          BREAKING_CHANGES=$(echo "$INSPECTOR_OUTPUT" | grep -E '✖' || echo "")
          
          # Count breaking changes
          BREAKING_COUNT=$(echo "$BREAKING_CHANGES" | grep -c '✖' || echo "0")
          
          # Write breaking changes to a separate file for easier processing
          echo "$BREAKING_CHANGES" > breaking_changes.txt
          
          # Set output variables
          echo "has_changes=$([[ $BREAKING_COUNT -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "breaking_count=$BREAKING_COUNT" >> $GITHUB_OUTPUT

      - name: Check for approval in PR description
        if: steps.schema-check.outputs.has_changes == 'true'
        id: check-approval
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get the PR description
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Look for approval tag in PR description
            const approvalPattern = /\[APPROVED BREAKING CHANGES\]:\s*([\s\S]*?)(?=\[|$)/;
            const match = pullRequest.body ? pullRequest.body.match(approvalPattern) : null;
            
            if (!match) {
              console.log('No approved breaking changes found in PR description');
              return false;
            }
            
            const approvedChanges = match[1].trim().split('\n').filter(line => line.trim() !== '');
            console.log('Approved breaking changes found:', approvedChanges);
            
            // Read breaking changes from file
            let breakingChanges = [];
            try {
              const breakingChangesText = fs.readFileSync('breaking_changes.txt', 'utf8');
              breakingChanges = breakingChangesText.split('\n')
                .filter(line => line.trim() !== '')
                .map(line => {
                  // Clean up the log format
                  return line.replace(/\[log\] ✖ /, '').trim();
                });
            } catch (error) {
              console.log('Error reading breaking changes file:', error);
              return false;
            }
            
            console.log('Detected breaking changes:', breakingChanges);
            
            // Check if all breaking changes are approved
            let allApproved = true;
            const unapprovedChanges = [];
            
            for (const change of breakingChanges) {
              const isApproved = approvedChanges.some(approvedChange => 
                change.includes(approvedChange.trim()) || 
                approvedChange.trim().includes(change)
              );
              
              if (!isApproved) {
                allApproved = false;
                unapprovedChanges.push(change);
              }
            }
            
            if (allApproved) {
              console.log('All breaking changes are approved!');
              return true;
            } else {
              console.log('Some breaking changes are not approved:', unapprovedChanges);
              return false;
            }

      - name: Generate breaking changes report
        if: steps.schema-check.outputs.has_changes == 'true' && steps.check-approval.outputs.result != 'true'
        id: generate-report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read breaking changes from file
            let breakingChanges = [];
            try {
              const breakingChangesText = fs.readFileSync('breaking_changes.txt', 'utf8');
              breakingChanges = breakingChangesText.split('\n')
                .filter(line => line.trim() !== '')
                .map(line => {
                  // Clean up the log format
                  return line.replace(/\[log\] ✖ /, '').trim();
                });
            } catch (error) {
              console.log('Error reading breaking changes file:', error);
              return;
            }
            
            if (breakingChanges.length > 0) {
              let comment = '## ⚠️ Breaking GraphQL Schema Changes Detected\n\n';
              comment += 'This PR contains breaking changes to the GraphQL schema that need approval:\n\n';
              
              for (const change of breakingChanges) {
                comment += `- **BREAKING**: ${change}\n`;
              }
              
              comment += '\n### How to approve these changes\n\n';
              comment += 'To approve these breaking changes, add the following section to your PR description:\n\n';
              comment += '```\n[APPROVED BREAKING CHANGES]:\n';
              
              for (const change of breakingChanges) {
                comment += `${change}\n`;
              }
              
              comment += '```\n\n';
              comment += 'Then update the PR to trigger this workflow again.';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Fail if breaking changes are not approved
        if: steps.schema-check.outputs.has_changes == 'true' && steps.check-approval.outputs.result != 'true'
        run: |
          echo "❌ Breaking schema changes detected and not approved in PR description."
          echo "Please approve the breaking changes by adding the [APPROVED BREAKING CHANGES] section to your PR description."
          echo "Breaking changes detected: $(cat breaking_changes.txt)"
          exit 1

      - name: Pass check if breaking changes are approved
        if: steps.schema-check.outputs.has_changes == 'true' && steps.check-approval.outputs.result == 'true'
        run: |
          echo "✅ Breaking schema changes have been approved in the PR description."
          echo "Approved changes: $(cat breaking_changes.txt)"

      - name: Pass check if no breaking changes
        if: steps.schema-check.outputs.has_changes != 'true'
        run: |
          echo "✅ No breaking schema changes detected."
