name: GraphQL-Inspector

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, labeled, unlabeled]

jobs:
  schema-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch (main)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: Create old schema file
        run: |
          mkdir -p .github/schemas
          cat base-branch/internal/api/graphql/graph/schema/*.graphqls > .github/schemas/old-schema.graphql

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          path: pr-branch

      - name: Create new schema file
        run: |
          cat pr-branch/internal/api/graphql/graph/schema/*.graphqls > .github/schemas/new-schema.graphql

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install @graphql-inspector/cli

      - name: Check Schema Changes
        id: schema-check
        continue-on-error: true
        run: |
          # Run inspector and capture the output
          INSPECTOR_OUTPUT=$(npx graphql-inspector diff .github/schemas/old-schema.graphql .github/schemas/new-schema.graphql || true)

          # Write output to a file for reference
          echo "$INSPECTOR_OUTPUT" > schema_changes.txt

          # Extract breaking changes (lines with ✖)
          BREAKING_CHANGES=$(echo "$INSPECTOR_OUTPUT" | grep -E '✖' || echo "")

          # Count breaking changes
          BREAKING_COUNT=$(echo "$BREAKING_CHANGES" | grep -c '✖' || echo "0")

          # Write breaking changes to a separate file for easier processing
          echo "$BREAKING_CHANGES" > breaking_changes.txt

          # Set output variables
          echo "has_changes=$([[ $BREAKING_COUNT -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "breaking_count=$BREAKING_COUNT" >> $GITHUB_OUTPUT

      - name: Check for approval label
        if: steps.schema-check.outputs.has_changes == 'true'
        id: check-label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('fs');
            // Don't redeclare core, it's already available
      
            // Read breaking changes from file
            let breakingChanges = [];
            try {
              const breakingChangesText = fs.readFileSync('breaking_changes.txt', 'utf8');
              breakingChanges = breakingChangesText.split('\n')
                .filter(line => line.trim() !== '')
                .map(line => {
                  // Clean up the log format
                  return line.replace(/\[log\] ✖ /, '').trim();
                });
            } catch (error) {
              console.log('Error reading breaking changes file:', error);
              core.setOutput('approved', 'false');
              return 'false';
            }
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const approvedLabel = labels.find(label => label.name === 'approved-schema-change');
            if (approvedLabel) {
              console.log('Approved label found.');
              core.setOutput('approved', 'true');
            } else {
              console.log('Approved label not found.');
              core.setOutput('approved', 'false');
            }

      - name: Fail if breaking changes are not approved
        if: steps.schema-check.outputs.has_changes == 'true' && steps.check-label.outputs.approved != 'true'
        run: |
          echo "❌ Breaking schema changes detected and not approved."
          echo "Please approve the breaking changes by adding the 'approved-schema-change' label to the PR."
          echo "Breaking changes detected: $(cat breaking_changes.txt)"
          exit 1

      - name: Pass check if breaking changes are approved
        if: steps.schema-check.outputs.has_changes == 'true' && steps.check-label.outputs.approved == 'true'
        run: |
          echo "✅ Breaking schema changes have been approved with the 'approved-schema-change' label."
          echo "Approved changes: $(cat breaking_changes.txt)"

      - name: Pass check if no breaking changes
        if: steps.schema-check.outputs.has_changes != 'true'
        run: |
          echo "✅ No breaking schema changes detected."
