// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreateIssueCreateIssue includes the requested fields of the GraphQL type Issue.
type CreateIssueCreateIssue struct {
	Id          string     `json:"id"`
	PrimaryName string     `json:"primaryName"`
	Description string     `json:"description"`
	Type        IssueTypes `json:"type"`
}

// GetId returns CreateIssueCreateIssue.Id, and is useful for accessing the field via an interface.
func (v *CreateIssueCreateIssue) GetId() string { return v.Id }

// GetPrimaryName returns CreateIssueCreateIssue.PrimaryName, and is useful for accessing the field via an interface.
func (v *CreateIssueCreateIssue) GetPrimaryName() string { return v.PrimaryName }

// GetDescription returns CreateIssueCreateIssue.Description, and is useful for accessing the field via an interface.
func (v *CreateIssueCreateIssue) GetDescription() string { return v.Description }

// GetType returns CreateIssueCreateIssue.Type, and is useful for accessing the field via an interface.
func (v *CreateIssueCreateIssue) GetType() IssueTypes { return v.Type }

// CreateIssueRepositoryCreateIssueRepository includes the requested fields of the GraphQL type IssueRepository.
type CreateIssueRepositoryCreateIssueRepository struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

// GetId returns CreateIssueRepositoryCreateIssueRepository.Id, and is useful for accessing the field via an interface.
func (v *CreateIssueRepositoryCreateIssueRepository) GetId() string { return v.Id }

// GetName returns CreateIssueRepositoryCreateIssueRepository.Name, and is useful for accessing the field via an interface.
func (v *CreateIssueRepositoryCreateIssueRepository) GetName() string { return v.Name }

// GetUrl returns CreateIssueRepositoryCreateIssueRepository.Url, and is useful for accessing the field via an interface.
func (v *CreateIssueRepositoryCreateIssueRepository) GetUrl() string { return v.Url }

// CreateIssueRepositoryResponse is returned by CreateIssueRepository on success.
type CreateIssueRepositoryResponse struct {
	CreateIssueRepository *CreateIssueRepositoryCreateIssueRepository `json:"createIssueRepository"`
}

// GetCreateIssueRepository returns CreateIssueRepositoryResponse.CreateIssueRepository, and is useful for accessing the field via an interface.
func (v *CreateIssueRepositoryResponse) GetCreateIssueRepository() *CreateIssueRepositoryCreateIssueRepository {
	return v.CreateIssueRepository
}

// CreateIssueResponse is returned by CreateIssue on success.
type CreateIssueResponse struct {
	CreateIssue *CreateIssueCreateIssue `json:"createIssue"`
}

// GetCreateIssue returns CreateIssueResponse.CreateIssue, and is useful for accessing the field via an interface.
func (v *CreateIssueResponse) GetCreateIssue() *CreateIssueCreateIssue { return v.CreateIssue }

// CreateIssueVariantCreateIssueVariant includes the requested fields of the GraphQL type IssueVariant.
type CreateIssueVariantCreateIssueVariant struct {
	Id            string `json:"id"`
	SecondaryName string `json:"secondaryName"`
	IssueId       string `json:"issueId"`
}

// GetId returns CreateIssueVariantCreateIssueVariant.Id, and is useful for accessing the field via an interface.
func (v *CreateIssueVariantCreateIssueVariant) GetId() string { return v.Id }

// GetSecondaryName returns CreateIssueVariantCreateIssueVariant.SecondaryName, and is useful for accessing the field via an interface.
func (v *CreateIssueVariantCreateIssueVariant) GetSecondaryName() string { return v.SecondaryName }

// GetIssueId returns CreateIssueVariantCreateIssueVariant.IssueId, and is useful for accessing the field via an interface.
func (v *CreateIssueVariantCreateIssueVariant) GetIssueId() string { return v.IssueId }

// CreateIssueVariantResponse is returned by CreateIssueVariant on success.
type CreateIssueVariantResponse struct {
	CreateIssueVariant *CreateIssueVariantCreateIssueVariant `json:"createIssueVariant"`
}

// GetCreateIssueVariant returns CreateIssueVariantResponse.CreateIssueVariant, and is useful for accessing the field via an interface.
func (v *CreateIssueVariantResponse) GetCreateIssueVariant() *CreateIssueVariantCreateIssueVariant {
	return v.CreateIssueVariant
}

// GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection includes the requested fields of the GraphQL type IssueRepositoryConnection.
type GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection struct {
	TotalCount int                                                                                       `json:"totalCount"`
	Edges      []*GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge `json:"edges"`
}

// GetTotalCount returns GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection) GetEdges() []*GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge {
	return v.Edges
}

// GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge includes the requested fields of the GraphQL type IssueRepositoryEdge.
type GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge struct {
	Node *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository `json:"node"`
}

// GetNode returns GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdge) GetNode() *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository {
	return v.Node
}

// GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository includes the requested fields of the GraphQL type IssueRepository.
type GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository struct {
	Id string `json:"id"`
}

// GetId returns GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository.Id, and is useful for accessing the field via an interface.
func (v *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnectionEdgesIssueRepositoryEdgeNodeIssueRepository) GetId() string {
	return v.Id
}

// GetIssueRepositoriesResponse is returned by GetIssueRepositories on success.
type GetIssueRepositoriesResponse struct {
	IssueRepositories *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection `json:"IssueRepositories"`
}

// GetIssueRepositories returns GetIssueRepositoriesResponse.IssueRepositories, and is useful for accessing the field via an interface.
func (v *GetIssueRepositoriesResponse) GetIssueRepositories() *GetIssueRepositoriesIssueRepositoriesIssueRepositoryConnection {
	return v.IssueRepositories
}

// GetIssuesIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type GetIssuesIssuesIssueConnection struct {
	TotalCount int                                             `json:"totalCount"`
	Edges      []*GetIssuesIssuesIssueConnectionEdgesIssueEdge `json:"edges"`
}

// GetTotalCount returns GetIssuesIssuesIssueConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetIssuesIssuesIssueConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns GetIssuesIssuesIssueConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetIssuesIssuesIssueConnection) GetEdges() []*GetIssuesIssuesIssueConnectionEdgesIssueEdge {
	return v.Edges
}

// GetIssuesIssuesIssueConnectionEdgesIssueEdge includes the requested fields of the GraphQL type IssueEdge.
type GetIssuesIssuesIssueConnectionEdgesIssueEdge struct {
	Node *GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue `json:"node"`
}

// GetNode returns GetIssuesIssuesIssueConnectionEdgesIssueEdge.Node, and is useful for accessing the field via an interface.
func (v *GetIssuesIssuesIssueConnectionEdgesIssueEdge) GetNode() *GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue {
	return v.Node
}

// GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue struct {
	Id string `json:"id"`
}

// GetId returns GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue.Id, and is useful for accessing the field via an interface.
func (v *GetIssuesIssuesIssueConnectionEdgesIssueEdgeNodeIssue) GetId() string { return v.Id }

// GetIssuesResponse is returned by GetIssues on success.
type GetIssuesResponse struct {
	Issues *GetIssuesIssuesIssueConnection `json:"Issues"`
}

// GetIssues returns GetIssuesResponse.Issues, and is useful for accessing the field via an interface.
func (v *GetIssuesResponse) GetIssues() *GetIssuesIssuesIssueConnection { return v.Issues }

type IssueFilter struct {
	AffectedService    []string                 `json:"affectedService"`
	PrimaryName        []string                 `json:"primaryName"`
	IssueMatchStatus   []IssueMatchStatusValues `json:"issueMatchStatus"`
	IssueType          []IssueTypes             `json:"issueType"`
	ComponentVersionId []string                 `json:"componentVersionId"`
	Search             []string                 `json:"search"`
}

// GetAffectedService returns IssueFilter.AffectedService, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAffectedService() []string { return v.AffectedService }

// GetPrimaryName returns IssueFilter.PrimaryName, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetPrimaryName() []string { return v.PrimaryName }

// GetIssueMatchStatus returns IssueFilter.IssueMatchStatus, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetIssueMatchStatus() []IssueMatchStatusValues { return v.IssueMatchStatus }

// GetIssueType returns IssueFilter.IssueType, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetIssueType() []IssueTypes { return v.IssueType }

// GetComponentVersionId returns IssueFilter.ComponentVersionId, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetComponentVersionId() []string { return v.ComponentVersionId }

// GetSearch returns IssueFilter.Search, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSearch() []string { return v.Search }

type IssueInput struct {
	PrimaryName string     `json:"primaryName"`
	Description string     `json:"description"`
	Type        IssueTypes `json:"type"`
}

// GetPrimaryName returns IssueInput.PrimaryName, and is useful for accessing the field via an interface.
func (v *IssueInput) GetPrimaryName() string { return v.PrimaryName }

// GetDescription returns IssueInput.Description, and is useful for accessing the field via an interface.
func (v *IssueInput) GetDescription() string { return v.Description }

// GetType returns IssueInput.Type, and is useful for accessing the field via an interface.
func (v *IssueInput) GetType() IssueTypes { return v.Type }

type IssueMatchStatusValues string

const (
	IssueMatchStatusValuesNew           IssueMatchStatusValues = "new"
	IssueMatchStatusValuesRiskAccepted  IssueMatchStatusValues = "risk_accepted"
	IssueMatchStatusValuesFalsePositive IssueMatchStatusValues = "false_positive"
	IssueMatchStatusValuesMitigated     IssueMatchStatusValues = "mitigated"
)

type IssueRepositoryFilter struct {
	ServiceName []string `json:"serviceName"`
	ServiceId   []string `json:"serviceId"`
	Name        []string `json:"name"`
}

// GetServiceName returns IssueRepositoryFilter.ServiceName, and is useful for accessing the field via an interface.
func (v *IssueRepositoryFilter) GetServiceName() []string { return v.ServiceName }

// GetServiceId returns IssueRepositoryFilter.ServiceId, and is useful for accessing the field via an interface.
func (v *IssueRepositoryFilter) GetServiceId() []string { return v.ServiceId }

// GetName returns IssueRepositoryFilter.Name, and is useful for accessing the field via an interface.
func (v *IssueRepositoryFilter) GetName() []string { return v.Name }

type IssueRepositoryInput struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

// GetName returns IssueRepositoryInput.Name, and is useful for accessing the field via an interface.
func (v *IssueRepositoryInput) GetName() string { return v.Name }

// GetUrl returns IssueRepositoryInput.Url, and is useful for accessing the field via an interface.
func (v *IssueRepositoryInput) GetUrl() string { return v.Url }

type IssueTypes string

const (
	IssueTypesVulnerability   IssueTypes = "Vulnerability"
	IssueTypesPolicyviolation IssueTypes = "PolicyViolation"
	IssueTypesSecurityevent   IssueTypes = "SecurityEvent"
)

type IssueVariantInput struct {
	SecondaryName     string         `json:"secondaryName"`
	Description       string         `json:"description"`
	IssueRepositoryId string         `json:"issueRepositoryId"`
	IssueId           string         `json:"issueId"`
	Severity          *SeverityInput `json:"severity,omitempty"`
}

// GetSecondaryName returns IssueVariantInput.SecondaryName, and is useful for accessing the field via an interface.
func (v *IssueVariantInput) GetSecondaryName() string { return v.SecondaryName }

// GetDescription returns IssueVariantInput.Description, and is useful for accessing the field via an interface.
func (v *IssueVariantInput) GetDescription() string { return v.Description }

// GetIssueRepositoryId returns IssueVariantInput.IssueRepositoryId, and is useful for accessing the field via an interface.
func (v *IssueVariantInput) GetIssueRepositoryId() string { return v.IssueRepositoryId }

// GetIssueId returns IssueVariantInput.IssueId, and is useful for accessing the field via an interface.
func (v *IssueVariantInput) GetIssueId() string { return v.IssueId }

// GetSeverity returns IssueVariantInput.Severity, and is useful for accessing the field via an interface.
func (v *IssueVariantInput) GetSeverity() *SeverityInput { return v.Severity }

type SeverityInput struct {
	Vector string `json:"vector"`
}

// GetVector returns SeverityInput.Vector, and is useful for accessing the field via an interface.
func (v *SeverityInput) GetVector() string { return v.Vector }

// __CreateIssueInput is used internally by genqlient
type __CreateIssueInput struct {
	Input *IssueInput `json:"input,omitempty"`
}

// GetInput returns __CreateIssueInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateIssueInput) GetInput() *IssueInput { return v.Input }

// __CreateIssueRepositoryInput is used internally by genqlient
type __CreateIssueRepositoryInput struct {
	Input *IssueRepositoryInput `json:"input,omitempty"`
}

// GetInput returns __CreateIssueRepositoryInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateIssueRepositoryInput) GetInput() *IssueRepositoryInput { return v.Input }

// __CreateIssueVariantInput is used internally by genqlient
type __CreateIssueVariantInput struct {
	Input *IssueVariantInput `json:"input,omitempty"`
}

// GetInput returns __CreateIssueVariantInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateIssueVariantInput) GetInput() *IssueVariantInput { return v.Input }

// __GetIssueRepositoriesInput is used internally by genqlient
type __GetIssueRepositoriesInput struct {
	Filter *IssueRepositoryFilter `json:"filter,omitempty"`
}

// GetFilter returns __GetIssueRepositoriesInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetIssueRepositoriesInput) GetFilter() *IssueRepositoryFilter { return v.Filter }

// __GetIssuesInput is used internally by genqlient
type __GetIssuesInput struct {
	Filter *IssueFilter `json:"filter,omitempty"`
}

// GetFilter returns __GetIssuesInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetIssuesInput) GetFilter() *IssueFilter { return v.Filter }

// The query or mutation executed by CreateIssue.
const CreateIssue_Operation = `
mutation CreateIssue ($input: IssueInput!) {
	createIssue(input: $input) {
		id
		primaryName
		description
		type
	}
}
`

func CreateIssue(
	ctx_ context.Context,
	client_ graphql.Client,
	input *IssueInput,
) (*CreateIssueResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateIssue",
		Query:  CreateIssue_Operation,
		Variables: &__CreateIssueInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateIssueResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateIssueRepository.
const CreateIssueRepository_Operation = `
mutation CreateIssueRepository ($input: IssueRepositoryInput!) {
	createIssueRepository(input: $input) {
		id
		name
		url
	}
}
`

func CreateIssueRepository(
	ctx_ context.Context,
	client_ graphql.Client,
	input *IssueRepositoryInput,
) (*CreateIssueRepositoryResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateIssueRepository",
		Query:  CreateIssueRepository_Operation,
		Variables: &__CreateIssueRepositoryInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateIssueRepositoryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateIssueVariant.
const CreateIssueVariant_Operation = `
mutation CreateIssueVariant ($input: IssueVariantInput!) {
	createIssueVariant(input: $input) {
		id
		secondaryName
		issueId
	}
}
`

func CreateIssueVariant(
	ctx_ context.Context,
	client_ graphql.Client,
	input *IssueVariantInput,
) (*CreateIssueVariantResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateIssueVariant",
		Query:  CreateIssueVariant_Operation,
		Variables: &__CreateIssueVariantInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateIssueVariantResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetIssueRepositories.
const GetIssueRepositories_Operation = `
query GetIssueRepositories ($filter: IssueRepositoryFilter) {
	IssueRepositories(filter: $filter) {
		totalCount
		edges {
			node {
				id
			}
		}
	}
}
`

func GetIssueRepositories(
	ctx_ context.Context,
	client_ graphql.Client,
	filter *IssueRepositoryFilter,
) (*GetIssueRepositoriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetIssueRepositories",
		Query:  GetIssueRepositories_Operation,
		Variables: &__GetIssueRepositoriesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ GetIssueRepositoriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetIssues.
const GetIssues_Operation = `
query GetIssues ($filter: IssueFilter) {
	Issues(filter: $filter) {
		totalCount
		edges {
			node {
				id
			}
		}
	}
}
`

func GetIssues(
	ctx_ context.Context,
	client_ graphql.Client,
	filter *IssueFilter,
) (*GetIssuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetIssues",
		Query:  GetIssues_Operation,
		Variables: &__GetIssuesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ GetIssuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
